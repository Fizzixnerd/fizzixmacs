;; Object python2.7/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "python2.7/"
  :tables (list 
   (semanticdb-table "os.py"
    :major-mode 'python-mode
    :tags 
        '( ("r\"\"\"OS routines for Mac, NT, or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is one of the modules posixpath, or ntpath
  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator ('.' or '/')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1163])
            ("sys" include nil nil [1169 1186])
            ("errno" include nil nil [1169 1186])
            ("_names" variable nil nil [1188 1221])
            ("__all__" variable nil nil [1271 1446])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1470 1476]))              ) nil [1448 1606])
            ("if" code nil nil [1607 3137])
            ("sys" variable nil nil [3138 3167])
            ("" code nil nil [3188 3256])
            ("del" code nil nil [3258 3268])
            ("SEEK_SET" variable nil nil [3390 3402])
            ("SEEK_CUR" variable nil nil [3403 3415])
            ("SEEK_END" variable nil nil [3416 3428])
            ("makedirs" function
               (:documentation "makedirs(path [, mode=0777])

    Super-mkdir; create a leaf directory and all intermediate ones.
    Works like mkdir, except that any intermediate path segment (not
    just the rightmost) will be created if it does not exist.  This is
    recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3538 3542])
                    ("mode" variable nil (reparse-symbol function_parameters) [3544 3548]))                  )
                nil [3525 4277])
            ("removedirs" function
               (:documentation "removedirs(path)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4293 4297]))                  )
                nil [4278 4984])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned way until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [4997 5000])
                    ("new" variable nil (reparse-symbol function_parameters) [5002 5005]))                  )
                nil [4985 5856])
            ("__all__" code nil nil [5857 5910])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune
    the search, or to impose a specific order of visiting.  Modifying
    dirnames when topdown is false is ineffective, since the directories in
    dirnames have already been generated by the time dirnames itself is
    generated.

    By default errors from the os.listdir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an os.error instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print root, \"consumes\",
        print sum([getsize(join(root, name)) for name in files]),
        print \"bytes in\", len(files), \"non-directory files\"
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories
    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [5921 5924])
                    ("topdown" variable nil (reparse-symbol function_parameters) [5926 5933])
                    ("onerror" variable nil (reparse-symbol function_parameters) [5940 5947])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [5954 5965]))                  )
                nil [5912 9693])
            ("__all__" code nil nil [9694 9716])
            ("try" code nil nil [9758 9810])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9821 9825])
                    ("args" variable nil (reparse-symbol function_parameters) [9827 9832]))                  )
                nil [9811 9980])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9992 9996])
                    ("args" variable nil (reparse-symbol function_parameters) [9998 10003]))                  )
                nil [9981 10207])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10219 10223])
                    ("args" variable nil (reparse-symbol function_parameters) [10225 10230]))                  )
                nil [10208 10416])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10429 10433])
                    ("args" variable nil (reparse-symbol function_parameters) [10435 10440]))                  )
                nil [10417 10686])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10698 10702])
                    ("args" variable nil (reparse-symbol function_parameters) [10704 10708]))                  )
                nil [10687 10939])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10952 10956])
                    ("args" variable nil (reparse-symbol function_parameters) [10958 10962])
                    ("env" variable nil (reparse-symbol function_parameters) [10964 10967]))                  )
                nil [10940 11234])
            ("__all__" code nil nil [11235 11307])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [11322 11326])
                ("args" variable nil (reparse-symbol function_parameters) [11328 11332])
                ("env" variable nil (reparse-symbol function_parameters) [11334 11337]))              ) nil [11309 12177])
            ("try" code nil nil [12239 16448])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [16460 16463])
                    ("default" variable nil (reparse-symbol function_parameters) [16465 16472]))                  )
                nil [16449 16656])
            ("__all__" code nil nil [16656 16680])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16694 16698]))              ) nil [16682 16730])
            ("if" code nil nil [16774 19677])
            ("if" code nil nil [19678 20675])
            ("if" code nil nil [20677 21783])
            ("if" code nil nil [21817 25083])
            ("copy_reg" include nil nil [25084 25112])
            ("_make_stat_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25136 25139])
                ("dict" variable nil (reparse-symbol function_parameters) [25141 25145]))              ) nil [25114 25182])
            ("_pickle_stat_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25207 25209]))              ) nil [25183 25284])
            ("try" code nil nil [25285 25419])
            ("_make_statvfs_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25445 25448])
                ("dict" variable nil (reparse-symbol function_parameters) [25450 25454]))              ) nil [25420 25494])
            ("_pickle_statvfs_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25522 25524]))              ) nil [25495 25602])
            ("try" code nil nil [25603 25770]))          
    :file "os.py"
    :pointmax 25770
    :fsize 25769
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "copy_reg.py"
    :major-mode 'python-mode
    :tags nil
    :file "copy_reg.py"
    :pointmax 6801
    :fsize 6800
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "subprocess.py"
    :major-mode 'python-mode
    :tags nil
    :file "subprocess.py"
    :pointmax 59047
    :fsize 59046
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "smtplib.py"
    :major-mode 'python-mode
    :tags 
        '( ("'''SMTP/ESMTP client class.

This should follow RFC 821 (SMTP), RFC 1869 (ESMTP), RFC 2554 (SMTP
Authentication) and RFC 2487 (Secure SMTP over TLS).

Notes:

Please remember, when doing ESMTP, that the names of the SMTP service
extensions are NOT the same thing as the option keywords for the RCPT
and MAIL commands!

Example:

  >>> import smtplib
  >>> s=smtplib.SMTP(\"localhost\")
  >>> print s.help()
  This is Sendmail version 8.8.4
  Topics:
      HELO    EHLO    MAIL    RCPT    DATA
      RSET    NOOP    QUIT    HELP    VRFY
      EXPN    VERB    ETRN    DSN
  For more info use \"HELP <topic>\".
  To report bugs in the implementation send email to
      sendmail-bugs@sendmail.org.
  For local information send email to Postmaster at your site.
  End of HELP info
  >>> s.putcmd(\"vrfy\",\"someone@here\")
  >>> s.getreply()
  (250, \"Somebody OverHere <somebody@here.my.org>\")
  >>> s.quit()
'''" code nil nil [24 924])
            ("socket" include nil nil [1341 1354])
            ("re" include nil nil [1355 1364])
            ("email.utils" include nil nil [1365 1383])
            ("base64" include nil nil [1384 1397])
            ("hmac" include nil nil [1398 1409])
            ("email.base64mime" include nil nil [1410 1462])
            ("sys" include nil nil [1463 1485])
            ("__all__" variable nil nil [1487 1759])
            ("SMTP_PORT" variable nil nil [1761 1775])
            ("SMTP_SSL_PORT" variable nil nil [1776 1795])
            ("CRLF" variable nil nil [1796 1809])
            ("OLDSTYLE_AUTH" variable nil nil [1811 1857])
            ("SMTPException" type
               (:documentation "Base class for all exceptions raised by this module."
                :superclasses ("Exception")
                :type "class")
                nil [1901 1996])
            ("SMTPServerDisconnected" type
               (:documentation "Not connected to any SMTP server.

    This exception is raised when the server unexpectedly disconnects,
    or when an attempt is made to use the SMTP instance before
    connecting it to a server.
    "
                :superclasses ("SMTPException")
                :type "class")
                nil [1997 2257])
            ("SMTPResponseException" type
               (:documentation "Base class for all exceptions that include an SMTP error code.

    These exceptions are generated in some instances when the SMTP
    server returns an error code.  The error code is stored in the
    `smtp_code' attribute of the error, and the `smtp_error' attribute
    is set to the error message.
    "
                :superclasses ("SMTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2663 2684])
                            ("self" variable nil (reparse-symbol indented_block_body) [2693 2714])
                            ("self" variable nil (reparse-symbol indented_block_body) [2723 2746]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2637 2641])
                            ("code" variable nil (reparse-symbol function_parameters) [2643 2647])
                            ("msg" variable nil (reparse-symbol function_parameters) [2649 2652]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2624 2747]))                  
                :type "class")
                nil [2258 2747])
            ("SMTPSenderRefused" type
               (:documentation "Sender address refused.

    In addition to the attributes set by on all SMTPResponseException
    exceptions, this sets `sender' to the string that the SMTP refused.
    "
                :superclasses ("SMTPResponseException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3030 3051])
                            ("self" variable nil (reparse-symbol indented_block_body) [3060 3081])
                            ("self" variable nil (reparse-symbol indented_block_body) [3090 3110])
                            ("self" variable nil (reparse-symbol indented_block_body) [3119 3150]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2996 3000])
                            ("code" variable nil (reparse-symbol function_parameters) [3002 3006])
                            ("msg" variable nil (reparse-symbol function_parameters) [3008 3011])
                            ("sender" variable nil (reparse-symbol function_parameters) [3013 3019]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2983 3151]))                  
                :type "class")
                nil [2748 3151])
            ("SMTPRecipientsRefused" type
               (:documentation "All recipient addresses refused.

    The errors for each recipient are accessible through the attribute
    'recipients', which is a dictionary of exactly the same sort as
    SMTP.sendmail() returns.
    "
                :superclasses ("SMTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3458 3486])
                            ("self" variable nil (reparse-symbol indented_block_body) [3495 3520]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3431 3435])
                            ("recipients" variable nil (reparse-symbol function_parameters) [3437 3447]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3418 3521]))                  
                :type "class")
                nil [3152 3521])
            ("SMTPDataError" type
               (:documentation "The SMTP server didn't accept the data."
                :superclasses ("SMTPResponseException")
                :type "class")
                nil [3523 3617])
            ("SMTPConnectError" type
               (:documentation "Error during connection establishment."
                :superclasses ("SMTPResponseException")
                :type "class")
                nil [3618 3714])
            ("SMTPHeloError" type
               (:documentation "The server refused our HELO reply."
                :superclasses ("SMTPResponseException")
                :type "class")
                nil [3715 3804])
            ("SMTPAuthenticationError" type
               (:documentation "Authentication error.

    Most probably the server didn't accept the username/password
    combination provided.
    "
                :superclasses ("SMTPResponseException")
                :type "class")
                nil [3805 3988])
            ("quoteaddr" function
               (:documentation "Quote a subset of the email addresses defined by RFC 821.

    Should be able to handle anything rfc822.parseaddr can handle.
    "
                :arguments 
                  ( ("addr" variable nil (reparse-symbol function_parameters) [4004 4008]))                  )
                nil [3990 4535])
            ("_addr_only" function (:arguments 
              ( ("addrstring" variable nil (reparse-symbol function_parameters) [4551 4561]))              ) nil [4536 4760])
            ("quotedata" function
               (:documentation "Quote data for email.

    Double leading '.', and change Unix newline '\\\\n', or Mac '\\\\r' into
    Internet CRLF end-of-line.
    "
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [4775 4779]))                  )
                nil [4761 5013])
            ("try" code nil nil [5015 5621])
            ("SMTP" type
               (:documentation "This class manages a connection to an SMTP or ESMTP server.
    SMTP Objects:
        SMTP objects have the following attributes:
            helo_resp
                This is the message given by the server in response to the
                most recent HELO command.

            ehlo_resp
                This is the message given by the server in response to the
                most recent EHLO command. This is usually multiline.

            does_esmtp
                This is a True value _after you do an EHLO command_, if the
                server supports ESMTP.

            esmtp_features
                This is a dictionary, which, if the server supports ESMTP,
                will _after you do an EHLO command_, contain the names of the
                SMTP service extensions this server supports, and their
                parameters (if any).

                Note, all extension names are mapped to lower case in the
                dictionary.

        See each method's docstrings for details.  In general, there is a
        method of the same name to perform each SMTP command.  There is also a
        method called 'sendmail' that will do an entire mail transaction.
        "
                :members 
                  ( ("debuglevel" variable nil (reparse-symbol indented_block_body) [6853 6867])
                    ("file" variable nil (reparse-symbol indented_block_body) [6872 6883])
                    ("helo_resp" variable nil (reparse-symbol indented_block_body) [6888 6904])
                    ("ehlo_msg" variable nil (reparse-symbol indented_block_body) [6909 6926])
                    ("ehlo_resp" variable nil (reparse-symbol indented_block_body) [6931 6947])
                    ("does_esmtp" variable nil (reparse-symbol indented_block_body) [6952 6966])
                    ("default_port" variable nil (reparse-symbol indented_block_body) [6971 6995])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize a new instance.

        If specified, `host' is the name of the remote host to which to
        connect.  If specified, `port' specifies the port to which to connect.
        By default, smtplib.SMTP_PORT is used.  If a host is specified the
        connect method is called, and if it returns anything other than a
        success code an SMTPConnectError is raised.  If specified,
        `local_hostname` is used as the FQDN of the local host for the
        HELO/EHLO command.  Otherwise, the local hostname is found using
        socket.getfqdn().

        \"\"\"" code nil (reparse-symbol indented_block_body) [7124 7704])
                            ("self" variable nil (reparse-symbol indented_block_body) [7713 7735])
                            ("self" variable nil (reparse-symbol indented_block_body) [7744 7768])
                            ("if" code nil (reparse-symbol indented_block_body) [7777 7915])
                            ("if" code nil (reparse-symbol indented_block_body) [7923 8690]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7014 7018])
                            ("host" variable nil (reparse-symbol function_parameters) [7020 7024])
                            ("port" variable nil (reparse-symbol function_parameters) [7029 7033])
                            ("local_hostname" variable nil (reparse-symbol function_parameters) [7037 7051])
                            ("timeout" variable nil (reparse-symbol function_parameters) [7075 7082]))                          
                        :documentation "Initialize a new instance.

        If specified, `host' is the name of the remote host to which to
        connect.  If specified, `port' specifies the port to which to connect.
        By default, smtplib.SMTP_PORT is used.  If a host is specified the
        connect method is called, and if it returns anything other than a
        success code an SMTPConnectError is raised.  If specified,
        `local_hostname` is used as the FQDN of the local host for the
        HELO/EHLO command.  Otherwise, the local hostname is found using
        socket.getfqdn().

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7001 8690])
                    ("set_debuglevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8714 8718])
                            ("debuglevel" variable nil (reparse-symbol function_parameters) [8720 8730]))                          
                        :documentation "Set the debug output level.

        A non-false value results in debug messages for connection and for all
        messages sent to and received from the server.

        ")
                        (reparse-symbol indented_block_body) [8695 8957])
                    ("_get_socket" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8978 8982])
                            ("host" variable nil (reparse-symbol function_parameters) [8984 8988])
                            ("port" variable nil (reparse-symbol function_parameters) [8990 8994])
                            ("timeout" variable nil (reparse-symbol function_parameters) [8996 9003]))                          )
                        (reparse-symbol indented_block_body) [8962 9279])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9296 9300])
                            ("host" variable nil (reparse-symbol function_parameters) [9302 9306])
                            ("port" variable nil (reparse-symbol function_parameters) [9320 9324]))                          
                        :documentation "Connect to a host on a given port.

        If the hostname ends with a colon (`:') followed by a number, and
        there is no port specified, that suffix will be stripped off and the
        number interpreted as the port number to use.

        Note: This method is automatically invoked by __init__, if a host is
        specified during instantiation.

        ")
                        (reparse-symbol indented_block_body) [9284 10376])
                    ("send" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10390 10394])
                            ("str" variable nil (reparse-symbol function_parameters) [10396 10399]))                          
                        :documentation "Send `str' to the server.")
                        (reparse-symbol indented_block_body) [10381 10840])
                    ("putcmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10856 10860])
                            ("cmd" variable nil (reparse-symbol function_parameters) [10862 10865])
                            ("args" variable nil (reparse-symbol function_parameters) [10867 10871]))                          
                        :documentation "Send a command to the server.")
                        (reparse-symbol indented_block_body) [10845 11068])
                    ("getreply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11086 11090]))                          
                        :documentation "Get a reply from the server.

        Returns a tuple consisting of:

          - server response code (e.g. '250', or such, if all goes well)
            Note: returns -1 if it can't read response code.

          - server response string corresponding to response code (multiline
            responses are converted to a single, multiline string).

        Raises SMTPServerDisconnected if end-of-file is reached.
        ")
                        (reparse-symbol indented_block_body) [11073 12749])
                    ("docmd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12764 12768])
                            ("cmd" variable nil (reparse-symbol function_parameters) [12770 12773])
                            ("args" variable nil (reparse-symbol function_parameters) [12775 12779]))                          
                        :documentation "Send a command, and return its response code.")
                        (reparse-symbol indented_block_body) [12754 12907])
                    ("helo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12945 12949])
                            ("name" variable nil (reparse-symbol function_parameters) [12951 12955]))                          
                        :documentation "SMTP 'helo' command.
        Hostname to send for this command defaults to the FQDN of the local
        host.
        ")
                        (reparse-symbol indented_block_body) [12936 13246])
                    ("ehlo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13260 13264])
                            ("name" variable nil (reparse-symbol function_parameters) [13266 13270]))                          
                        :documentation " SMTP 'ehlo' command.
        Hostname to send for this command defaults to the FQDN of the local
        host.
        ")
                        (reparse-symbol indented_block_body) [13251 15529])
                    ("has_extn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15547 15551])
                            ("opt" variable nil (reparse-symbol function_parameters) [15553 15556]))                          
                        :documentation "Does the server support a given SMTP service extension?")
                        (reparse-symbol indented_block_body) [15534 15679])
                    ("help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15693 15697])
                            ("args" variable nil (reparse-symbol function_parameters) [15699 15703]))                          
                        :documentation "SMTP 'help' command.
        Returns help text from server.")
                        (reparse-symbol indented_block_body) [15684 15851])
                    ("rset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15865 15869]))                          
                        :documentation "SMTP 'rset' command -- resets session.")
                        (reparse-symbol indented_block_body) [15856 15959])
                    ("noop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15973 15977]))                          
                        :documentation "SMTP 'noop' command -- doesn't do anything :>")
                        (reparse-symbol indented_block_body) [15964 16074])
                    ("mail" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16088 16092])
                            ("sender" variable nil (reparse-symbol function_parameters) [16094 16100])
                            ("options" variable nil (reparse-symbol function_parameters) [16102 16109]))                          
                        :documentation "SMTP 'mail' command -- begins mail xfer session.")
                        (reparse-symbol indented_block_body) [16079 16397])
                    ("rcpt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16411 16415])
                            ("recip" variable nil (reparse-symbol function_parameters) [16417 16422])
                            ("options" variable nil (reparse-symbol function_parameters) [16424 16431]))                          
                        :documentation "SMTP 'rcpt' command -- indicates 1 recipient for this mail.")
                        (reparse-symbol indented_block_body) [16402 16727])
                    ("data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16741 16745])
                            ("msg" variable nil (reparse-symbol function_parameters) [16747 16750]))                          
                        :documentation "SMTP 'DATA' command -- sends message data to server.

        Automatically quotes lines beginning with a period per rfc821.
        Raises SMTPDataError if there is an unexpected reply to the
        DATA command; the return value from this method is the final
        response code received when the all data is sent.
        ")
                        (reparse-symbol indented_block_body) [16732 17634])
                    ("verify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17650 17654])
                            ("address" variable nil (reparse-symbol function_parameters) [17656 17663]))                          
                        :documentation "SMTP 'verify' command -- checks for address validity.")
                        (reparse-symbol indented_block_body) [17639 17814])
                    ("vrfy" variable nil (reparse-symbol indented_block_body) [17831 17844])
                    ("expn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17859 17863])
                            ("address" variable nil (reparse-symbol function_parameters) [17865 17872]))                          
                        :documentation "SMTP 'expn' command -- expands a mailing list.")
                        (reparse-symbol indented_block_body) [17850 18016])
                    ("ehlo_or_helo_if_needed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18075 18079]))                          
                        :documentation "Call self.ehlo() and/or self.helo() if needed.

        If there has been no previous EHLO or HELO command this session, this
        method tries ESMTP EHLO first.

        This method may raise the following exceptions:

         SMTPHeloError            The server didn't reply properly to
                                  the helo greeting.
        ")
                        (reparse-symbol indented_block_body) [18048 18704])
                    ("login" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18719 18723])
                            ("user" variable nil (reparse-symbol function_parameters) [18725 18729])
                            ("password" variable nil (reparse-symbol function_parameters) [18731 18739]))                          
                        :documentation "Log in on an SMTP server that requires authentication.

        The arguments are:
            - user:     The user name to authenticate with.
            - password: The password for the authentication.

        If there has been no previous EHLO or HELO command this session, this
        method tries ESMTP EHLO first.

        This method will return normally if the authentication was successful.

        This method may raise the following exceptions:

         SMTPHeloError            The server didn't reply properly to
                                  the helo greeting.
         SMTPAuthenticationError  The server didn't accept the username/
                                  password combination.
         SMTPException            No suitable authentication method was
                                  found.
        ")
                        (reparse-symbol indented_block_body) [18709 21887])
                    ("starttls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21905 21909])
                            ("keyfile" variable nil (reparse-symbol function_parameters) [21911 21918])
                            ("certfile" variable nil (reparse-symbol function_parameters) [21925 21933]))                          
                        :documentation "Puts the connection to the SMTP server into TLS mode.

        If there has been no previous EHLO or HELO command this session, this
        method tries ESMTP EHLO first.

        If the server supports TLS, this will encrypt the rest of the SMTP
        session. If you provide the keyfile and certfile parameters,
        the identity of the SMTP server and client can be checked. This,
        however, depends on whether the socket module really checks the
        certificates.

        This method may raise the following exceptions:

         SMTPHeloError            The server didn't reply properly to
                                  the helo greeting.
        ")
                        (reparse-symbol indented_block_body) [21892 23480])
                    ("sendmail" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23498 23502])
                            ("from_addr" variable nil (reparse-symbol function_parameters) [23504 23513])
                            ("to_addrs" variable nil (reparse-symbol function_parameters) [23515 23523])
                            ("msg" variable nil (reparse-symbol function_parameters) [23525 23528])
                            ("mail_options" variable nil (reparse-symbol function_parameters) [23530 23542])
                            ("rcpt_options" variable nil (reparse-symbol function_parameters) [23564 23576]))                          
                        :documentation "This command performs an entire mail transaction.

        The arguments are:
            - from_addr    : The address sending this mail.
            - to_addrs     : A list of addresses to send this mail to.  A bare
                             string will be treated as a list with 1 address.
            - msg          : The message to send.
            - mail_options : List of ESMTP options (such as 8bitmime) for the
                             mail command.
            - rcpt_options : List of ESMTP options (such as DSN commands) for
                             all the rcpt commands.

        If there has been no previous EHLO or HELO command this session, this
        method tries ESMTP EHLO first.  If the server does ESMTP, message size
        and each of the specified options will be passed to it.  If EHLO
        fails, HELO will be tried and ESMTP options suppressed.

        This method will return normally if the mail is accepted for at least
        one recipient.  It returns a dictionary, with one entry for each
        recipient that was refused.  Each entry contains a tuple of the SMTP
        error code and the accompanying error message sent by the server.

        This method may raise the following exceptions:

         SMTPHeloError          The server didn't reply properly to
                                the helo greeting.
         SMTPRecipientsRefused  The server rejected ALL recipients
                                (no mail was sent).
         SMTPSenderRefused      The server didn't accept the from_addr.
         SMTPDataError          The server replied with an unexpected
                                error code (other than a refusal of
                                a recipient).

        Note: the connection will be open even after an exception is raised.

        Example:

         >>> import smtplib
         >>> s=smtplib.SMTP(\"localhost\")
         >>> tolist=[\"one@one.org\",\"two@two.org\",\"three@three.org\",\"four@four.org\"]
         >>> msg = '''\\\\
         ... From: Me@my.org
         ... Subject: testin'...
         ...
         ... This is a test '''
         >>> s.sendmail(\"me@my.org\",tolist,msg)
         { \"three@three.org\" : ( 550 ,\"User unknown\" ) }
         >>> s.quit()

        In the above example, the message was accepted for delivery to three
        of the four addresses, and one was rejected, with the error code
        550.  If all addresses are accepted, then the method will return an
        empty dictionary.

        ")
                        (reparse-symbol indented_block_body) [23485 27283])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27299 27303]))                          
                        :documentation "Close the connection to the SMTP server.")
                        (reparse-symbol indented_block_body) [27289 27515])
                    ("quit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27530 27534]))                          
                        :documentation "Terminate the SMTP session.")
                        (reparse-symbol indented_block_body) [27521 27652]))                  
                :type "class")
                nil [5622 27652])
            ("if" code nil nil [27653 29030])
            ("LMTP_PORT" variable nil nil [29052 29068])
            ("LMTP" type
               (:documentation "LMTP - Local Mail Transfer Protocol

    The LMTP protocol, which is very similar to ESMTP, is heavily based
    on the standard SMTP client. It's common to use Unix sockets for
    LMTP, so our connect() method must support that as well as a regular
    host:port server.  local_hostname has the same meaning as it does in
    the SMTP class.  To specify a Unix socket, you must use an absolute
    path as the host, starting with a '/'.

    Authentication is supported, using the regular SMTP mechanism. When
    using a Unix socket, LMTP generally don't support or require any
    authentication, but your mileage might vary."
                :superclasses ("SMTP")
                :members 
                  ( ("ehlo_msg" variable nil (reparse-symbol indented_block_body) [29733 29750])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize a new instance.\"\"\"" code nil (reparse-symbol indented_block_body) [29830 29862])
                            ("SMTP" code nil (reparse-symbol indented_block_body) [29871 29918]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29769 29773])
                            ("host" variable nil (reparse-symbol function_parameters) [29775 29779])
                            ("port" variable nil (reparse-symbol function_parameters) [29784 29788])
                            ("local_hostname" variable nil (reparse-symbol function_parameters) [29800 29814]))                          
                        :documentation "Initialize a new instance."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29756 29919])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29936 29940])
                            ("host" variable nil (reparse-symbol function_parameters) [29942 29946])
                            ("port" variable nil (reparse-symbol function_parameters) [29960 29964]))                          
                        :documentation "Connect to the LMTP daemon, on either a Unix or a TCP socket.")
                        (reparse-symbol indented_block_body) [29924 30649]))                  
                :type "class")
                nil [29070 30649])
            ("if" code nil nil [30751 31304]))          
    :file "smtplib.py"
    :pointmax 31304
    :fsize 31303
    :lastmodtime '(21294 8954 0 0)
    :unmatched-syntax '((INDENT_BLOCK 11745 . 11909) (NEWLINE 11744 . 11745) (COLON 11743 . 11744) (TRY 11658 . 11661) (AS 11739 . 11741))
    )
   (semanticdb-table "socket.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"\\
This module provides socket operations and some related functions.
On Unix, it supports IP (Internet Protocol) and Unix domain sockets.
On other systems, it only supports IP. Functions specific for a
socket are available as methods of the socket object.

Functions:

socket() -- create a new socket object
socketpair() -- create a pair of new socket objects [*]
fromfd() -- create a socket object from an open file descriptor [*]
gethostname() -- return the current hostname
gethostbyname() -- map a hostname to its IP number
gethostbyaddr() -- map an IP number or hostname to DNS info
getservbyname() -- map a service name and a protocol name to a port number
getprotobyname() -- map a protocol name (e.g. 'tcp') to a number
ntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order
htons(), htonl() -- convert 16, 32 bit int from host to network byte order
inet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format
inet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)
ssl() -- secure socket layer support (only available if configured)
socket.getdefaulttimeout() -- get the default timeout value
socket.setdefaulttimeout() -- set the default timeout value
create_connection() -- connects to an address, with an optional timeout and
                       optional source address.

 [*] not available on all platforms!

Special objects:

SocketType -- type object for socket objects
error -- exception raised for I/O errors
has_ipv6 -- boolean value indicating if IPv6 is supported

Integer constants:

AF_INET, AF_UNIX -- socket domains (first argument to socket() call)
SOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)

Many other constants may be defined; these may be used in calls to
the setsockopt() and getsockopt() methods.
\"\"\"" code nil nil [94 1909])
            ("_socket" include nil nil [1911 1925])
            ("_socket" include nil nil [1926 1947])
            ("functools" include nil nil [1948 1977])
            ("types" include nil nil [1978 2006])
            ("try" code nil nil [2008 2950])
            ("os" include nil nil [2951 2975])
            ("sys" include nil nil [2951 2975])
            ("warnings" include nil nil [2951 2975])
            ("try" code nil nil [2977 3071])
            ("try" code nil nil [3072 3131])
            ("EBADF" variable nil nil [3131 3165])
            ("EINTR" variable nil nil [3166 3200])
            ("__all__" variable nil nil [3202 3244])
            ("__all__" code nil nil [3245 3290])
            ("_realsocket" variable nil nil [3293 3313])
            ("if" code nil nil [3333 4229])
            ("getfqdn" function
               (:documentation "Get fully qualified domain name from name.

    An empty argument is interpreted as meaning the local host.

    First the hostname returned by gethostbyaddr() is checked, then
    possibly existing aliases. In case no FQDN is available, hostname
    from gethostname() is returned.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4244 4248]))                  )
                nil [4232 4923])
            ("_socketmethods" variable nil nil [4925 5136])
            ("if" code nil nil [5138 5207])
            ("if" code nil nil [5208 5291])
            ("_delegate_methods" variable nil nil [5402 5511])
            ("_closedsocket" type
               (:superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5546 5560])
                    ("_dummy" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [5576 5581]))                      ) (reparse-symbol indented_block_body) [5565 5634])
                    ("send" variable nil (reparse-symbol indented_block_body) [5697 5765])
                    ("__getattr__" variable nil (reparse-symbol indented_block_body) [5770 5790]))                  
                :type "class")
                nil [5513 5791])
            ("_socketobject" type
               (:superclasses ("object")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [6031 6060])
                    ("__slots__" code nil (reparse-symbol indented_block_body) [6066 6128])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [6217 6288])
                            ("self" variable nil (reparse-symbol indented_block_body) [6296 6314])
                            ("for" code nil (reparse-symbol indented_block_body) [6323 6414]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6147 6151])
                            ("family" variable nil (reparse-symbol function_parameters) [6153 6159])
                            ("type" variable nil (reparse-symbol function_parameters) [6169 6173])
                            ("proto" variable nil (reparse-symbol function_parameters) [6187 6192])
                            ("_sock" variable nil (reparse-symbol function_parameters) [6196 6201]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6134 6414])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6429 6433])
                            ("_closedsocket" variable nil (reparse-symbol function_parameters) [6435 6448])
                            ("_delegate_methods" variable nil (reparse-symbol function_parameters) [6478 6495])
                            ("setattr" variable nil (reparse-symbol function_parameters) [6515 6522]))                          )
                        (reparse-symbol indented_block_body) [6419 6763])
                    ("close" variable nil (reparse-symbol indented_block_body) [6767 6808])
                    ("accept" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6825 6829]))                          )
                        (reparse-symbol indented_block_body) [6814 6920])
                    ("accept" variable nil (reparse-symbol indented_block_body) [6924 6967])
                    ("dup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6981 6985]))                          
                        :documentation "dup() -> socket object

        Return a new socket object connected to the same system resource.")
                        (reparse-symbol indented_block_body) [6973 7147])
                    ("makefile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7165 7169])
                            ("mode" variable nil (reparse-symbol function_parameters) [7171 7175])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [7181 7188]))                          
                        :documentation "makefile([mode[, bufsize]]) -> file object

        Return a regular file object corresponding to the socket.  The mode
        and bufsize arguments are as for the built-in open() function.")
                        (reparse-symbol indented_block_body) [7152 7453])
                    ("family" variable nil (reparse-symbol indented_block_body) [7458 7532])
                    ("type" variable nil (reparse-symbol indented_block_body) [7537 7605])
                    ("proto" variable nil (reparse-symbol indented_block_body) [7610 7684]))                  
                :type "class")
                nil [5997 7685])
            ("meth" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [7695 7699])
                ("self" variable nil (reparse-symbol function_parameters) [7700 7704])
                ("args" variable nil (reparse-symbol function_parameters) [7705 7710]))              ) nil [7686 7756])
            ("for" code nil nil [7757 7949])
            ("socket" variable nil nil [7950 7985])
            ("_fileobject" type
               (:documentation "Faux file object attached to a socket object."
                :superclasses ("object")
                :members 
                  ( ("default_bufsize" variable nil (reparse-symbol indented_block_body) [8075 8097])
                    ("name" variable nil (reparse-symbol indented_block_body) [8102 8119])
                    ("__slots__" variable nil (reparse-symbol indented_block_body) [8125 8332])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8408 8425])
                            ("self" variable nil (reparse-symbol indented_block_body) [8434 8450])
                            ("if" code nil (reparse-symbol indented_block_body) [8495 8554])
                            ("self" variable nil (reparse-symbol indented_block_body) [8562 8584])
                            ("self" variable nil (reparse-symbol indented_block_body) [8593 8615])
                            ("if" code nil (reparse-symbol indented_block_body) [8842 9018])
                            ("self" variable nil (reparse-symbol indented_block_body) [9026 9050])
                            ("self" variable nil (reparse-symbol indented_block_body) [9339 9362])
                            ("self" variable nil (reparse-symbol indented_block_body) [9371 9386])
                            ("self" variable nil (reparse-symbol indented_block_body) [9415 9433])
                            ("self" variable nil (reparse-symbol indented_block_body) [9442 9461]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8351 8355])
                            ("sock" variable nil (reparse-symbol function_parameters) [8357 8361])
                            ("mode" variable nil (reparse-symbol function_parameters) [8363 8367])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [8374 8381])
                            ("close" variable nil (reparse-symbol function_parameters) [8386 8391]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8338 9462])
                    ("_getclosed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9482 9486]))                          )
                        (reparse-symbol indented_block_body) [9467 9523])
                    ("closed" variable nil (reparse-symbol indented_block_body) [9527 9590])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9606 9610]))                          )
                        (reparse-symbol indented_block_body) [9596 9792])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9809 9813]))                          )
                        (reparse-symbol indented_block_body) [9797 9946])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9961 9965]))                          )
                        (reparse-symbol indented_block_body) [9951 10724])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10740 10744]))                          )
                        (reparse-symbol indented_block_body) [10729 10782])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10797 10801])
                            ("data" variable nil (reparse-symbol function_parameters) [10803 10807]))                          )
                        (reparse-symbol indented_block_body) [10787 11179])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11199 11203])
                            ("list" variable nil (reparse-symbol function_parameters) [11205 11209]))                          )
                        (reparse-symbol indented_block_body) [11184 11560])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11574 11578])
                            ("size" variable nil (reparse-symbol function_parameters) [11580 11584]))                          )
                        (reparse-symbol indented_block_body) [11565 14532])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14550 14554])
                            ("size" variable nil (reparse-symbol function_parameters) [14556 14560]))                          )
                        (reparse-symbol indented_block_body) [14537 18555])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18574 18578])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [18580 18588]))                          )
                        (reparse-symbol indented_block_body) [18560 18881])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18925 18929]))                          )
                        (reparse-symbol indented_block_body) [18912 18952])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18966 18970]))                          )
                        (reparse-symbol indented_block_body) [18957 19077]))                  
                :type "class")
                nil [7987 19077])
            ("_GLOBAL_DEFAULT_TIMEOUT" variable nil nil [19078 19112])
            ("create_connection" function
               (:documentation "Connect to *address* and return the socket object.

    Convenience function.  Connect to *address* (a 2-tuple ``(host,
    port)``) and return the socket object.  Passing the optional
    *timeout* parameter will set the timeout on the socket instance
    before attempting to connect.  If no *timeout* is supplied, the
    global default timeout setting returned by :func:`getdefaulttimeout`
    is used.  If *source_address* is set it must be a tuple of (host, port)
    for the socket to bind as a source address before making the connection.
    An host of '' or port 0 tells the OS to use the default.
    "
                :arguments 
                  ( ("address" variable nil (reparse-symbol function_parameters) [19136 19143])
                    ("timeout" variable nil (reparse-symbol function_parameters) [19145 19152])
                    ("source_address" variable nil (reparse-symbol function_parameters) [19200 19214]))                  )
                nil [19114 20513]))          
    :file "socket.py"
    :pointmax 20513
    :fsize 20512
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax '((INDENT_BLOCK 20321 . 20403) (NEWLINE 20320 . 20321) (COLON 20319 . 20320) (TRY 20019 . 20022) (AS 20315 . 20317))
    )
   (semanticdb-table "re.py"
    :major-mode 'python-mode
    :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9].
    \\D       Matches any non-digit character; equivalent to the set [^0-9].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].
    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 5342])
            ("sys" include nil nil [5344 5354])
            ("sre_compile" include nil nil [5355 5373])
            ("sre_parse" include nil nil [5374 5390])
            ("__all__" variable nil nil [5409 5637])
            ("__version__" variable nil nil [5639 5660])
            ("I" variable nil nil [5670 5718])
            ("L" variable nil nil [5733 5773])
            ("U" variable nil nil [5804 5846])
            ("M" variable nil nil [5871 5917])
            ("S" variable nil nil [5950 5990])
            ("X" variable nil nil [6016 6058])
            ("T" variable nil nil [6146 6190])
            ("DEBUG" variable nil nil [6214 6248])
            ("error" variable nil nil [6299 6324])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6427 6434])
                    ("string" variable nil (reparse-symbol function_parameters) [6436 6442])
                    ("flags" variable nil (reparse-symbol function_parameters) [6444 6449]))                  )
                nil [6417 6628])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6640 6647])
                    ("string" variable nil (reparse-symbol function_parameters) [6649 6655])
                    ("flags" variable nil (reparse-symbol function_parameters) [6657 6662]))                  )
                nil [6629 6845])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6854 6861])
                    ("repl" variable nil (reparse-symbol function_parameters) [6863 6867])
                    ("string" variable nil (reparse-symbol function_parameters) [6869 6875])
                    ("count" variable nil (reparse-symbol function_parameters) [6877 6882])
                    ("flags" variable nil (reparse-symbol function_parameters) [6886 6891]))                  )
                nil [6846 7314])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7324 7331])
                    ("repl" variable nil (reparse-symbol function_parameters) [7333 7337])
                    ("string" variable nil (reparse-symbol function_parameters) [7339 7345])
                    ("count" variable nil (reparse-symbol function_parameters) [7347 7352])
                    ("flags" variable nil (reparse-symbol function_parameters) [7356 7361]))                  )
                nil [7315 7914])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7925 7932])
                    ("string" variable nil (reparse-symbol function_parameters) [7934 7940])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [7942 7950])
                    ("flags" variable nil (reparse-symbol function_parameters) [7954 7959]))                  )
                nil [7915 8151])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8164 8171])
                    ("string" variable nil (reparse-symbol function_parameters) [8173 8179])
                    ("flags" variable nil (reparse-symbol function_parameters) [8181 8186]))                  )
                nil [8152 8518])
            ("if" code nil nil [8519 8878])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [8891 8898])
                ("flags" variable nil (reparse-symbol function_parameters) [8900 8905]))              ) nil [8879 9018])
            ("purge" function nil nil [9019 9116])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9130 9137])
                ("flags" variable nil (reparse-symbol function_parameters) [9139 9144]))              ) nil [9117 9248])
            ("_alphanum" variable nil nil [9249 9341])
            ("escape" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9354 9361]))              ) nil [9343 13071]))          
    :file "re.py"
    :pointmax 13071
    :fsize 13070
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "base64.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"RFC 3548: Base16, Base32, Base64 Data Encodings\"\"\"" code nil nil [24 77])
            ("re" include nil nil [209 218])
            ("struct" include nil nil [219 232])
            ("binascii" include nil nil [233 248])
            ("__all__" variable nil nil [251 825])
            ("_translation" variable nil nil [827 872])
            ("EMPTYSTRING" variable nil nil [873 889])
            ("_translate" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [907 908])
                ("altchars" variable nil (reparse-symbol function_parameters) [910 918]))              ) nil [892 1066])
            ("b64encode" function
               (:documentation "Encode a string using Base64.

    s is the string to encode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies an
    alternative alphabet for the '+' and '/' characters.  This allows an
    application to e.g. generate url or filesystem safe Base64 strings.

    The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1126 1127])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1129 1137]))                  )
                nil [1112 1720])
            ("b64decode" function
               (:documentation "Decode a Base64 encoded string.

    s is the string to decode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies the
    alternative alphabet used instead of the '+' and '/' characters.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1736 1737])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1739 1747]))                  )
                nil [1722 2432])
            ("standard_b64encode" function
               (:documentation "Encode a string using the standard Base64 alphabet.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2457 2458]))                  )
                nil [2434 2617])
            ("standard_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2641 2642]))                  )
                nil [2618 2938])
            ("urlsafe_b64encode" function
               (:documentation "Encode a string using a url-safe Base64 alphabet.

    s is the string to encode.  The encoded string is returned.  The alphabet
    uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2961 2962]))                  )
                nil [2939 3191])
            ("urlsafe_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.

    The alphabet uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [3214 3215]))                  )
                nil [3192 3583])
            ("_b32alphabet" variable nil nil [3637 3974])
            ("_b32tab" variable nil nil [3976 4006])
            ("_b32tab" code nil nil [4007 4021])
            ("_b32tab" variable nil nil [4022 4055])
            ("_b32rev" variable nil nil [4056 4119])
            ("b32encode" function
               (:documentation "Encode a string using Base32.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4136 4137]))                  )
                nil [4122 5899])
            ("b32decode" function
               (:documentation "Decode a Base32 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O
    (oh), and for optional mapping of the digit 1 (one) to either the letter I
    (eye) or letter L (el).  The optional argument map01 when not None,
    specifies which letter the digit 1 should be mapped to (when map01 is not
    None, the digit 0 is always mapped to the letter O).  For security
    purposes the default is None, so that 0 and 1 are not allowed in the
    input.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5915 5916])
                    ("casefold" variable nil (reparse-symbol function_parameters) [5918 5926])
                    ("map01" variable nil (reparse-symbol function_parameters) [5934 5939]))                  )
                nil [5901 8385])
            ("b16encode" function
               (:documentation "Encode a string using Base16.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8559 8560]))                  )
                nil [8545 8712])
            ("b16decode" function
               (:documentation "Decode a Base16 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8728 8729])
                    ("casefold" variable nil (reparse-symbol function_parameters) [8731 8739]))                  )
                nil [8714 9290])
            ("MAXLINESIZE" variable nil nil [9453 9469])
            ("MAXBINSIZE" code nil nil [9491 9522])
            ("encode" function
               (:documentation "Encode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9535 9540])
                    ("output" variable nil (reparse-symbol function_parameters) [9542 9548]))                  )
                nil [9524 9875])
            ("decode" function
               (:documentation "Decode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9888 9893])
                    ("output" variable nil (reparse-symbol function_parameters) [9895 9901]))                  )
                nil [9877 10078])
            ("encodestring" function
               (:documentation "Encode a string into multiple lines of base-64 data."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10097 10098]))                  )
                nil [10080 10338])
            ("decodestring" function
               (:documentation "Decode a string."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10357 10358]))                  )
                nil [10340 10422])
            ("test" function (:documentation "Small test program") nil [10451 11192])
            ("test1" function nil nil [11194 11317])
            ("if" code nil nil [11319 11357]))          
    :file "base64.py"
    :pointmax 11357
    :fsize 11356
    :lastmodtime '(21294 8973 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "hmac.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"HMAC (Keyed-Hashing for Message Authentication) Python module.

Implements the HMAC algorithm as described by RFC 2104.
\"\"\"" code nil nil [1 127])
            ("warnings" include nil nil [129 157])
            ("trans_5C" variable nil nil [159 217])
            ("trans_36" variable nil nil [218 276])
            ("digest_size" variable nil nil [422 440])
            ("_secret_backdoor_key" variable nil nil [599 624])
            ("HMAC" type
               (:documentation "RFC 2104 HMAC class.  Also complies with RFC 4231.

    This supports the API for Cryptographic Hash Functions (PEP 247).
    "
                :members 
                  ( ("blocksize" variable nil (reparse-symbol indented_block_body) [779 793])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create a new HMAC object.

        key:       key for the keyed hash object.
        msg:       Initial input for the hash, if provided.
        digestmod: A module supporting PEP 247.  *OR*
                   A hashlib constructor returning a new hash object.
                   Defaults to hashlib.md5.
        \"\"\"" code nil (reparse-symbol indented_block_body) [909 1228])
                            ("if" code nil (reparse-symbol indented_block_body) [1238 1297])
                            ("if" code nil (reparse-symbol indented_block_body) [1306 1391])
                            ("if" code nil (reparse-symbol indented_block_body) [1400 1551])
                            ("self" variable nil (reparse-symbol indented_block_body) [1560 1591])
                            ("self" variable nil (reparse-symbol indented_block_body) [1600 1631])
                            ("self" variable nil (reparse-symbol indented_block_body) [1640 1681])
                            ("if" code nil (reparse-symbol indented_block_body) [1691 2415])
                            ("if" code nil (reparse-symbol indented_block_body) [2424 2498])
                            ("key" code nil (reparse-symbol indented_block_body) [2507 2550])
                            ("self" code nil (reparse-symbol indented_block_body) [2559 2601])
                            ("self" code nil (reparse-symbol indented_block_body) [2610 2652])
                            ("if" code nil (reparse-symbol indented_block_body) [2661 2710]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [859 863])
                            ("key" variable nil (reparse-symbol function_parameters) [865 868])
                            ("msg" variable nil (reparse-symbol function_parameters) [870 873])
                            ("digestmod" variable nil (reparse-symbol function_parameters) [882 891]))                          
                        :documentation "Create a new HMAC object.

        key:       key for the keyed hash object.
        msg:       Initial input for the hash, if provided.
        digestmod: A module supporting PEP 247.  *OR*
                   A hashlib constructor returning a new hash object.
                   Defaults to hashlib.md5.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [846 2710])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2827 2831])
                            ("msg" variable nil (reparse-symbol function_parameters) [2833 2836]))                          
                        :documentation "Update this hashing object with the string msg.
        ")
                        (reparse-symbol indented_block_body) [2816 2941])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2955 2959]))                          
                        :documentation "Return a separate copy of this hashing object.

        An update to this copy won't affect the original object.
        ")
                        (reparse-symbol indented_block_body) [2946 3342])
                    ("_current" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3360 3364]))                          
                        :documentation "Return a hash object for the current state.

        To be used only internally with digest() and hexdigest().
        ")
                        (reparse-symbol indented_block_body) [3347 3586])
                    ("digest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3602 3606]))                          
                        :documentation "Return the hash value of this hashing object.

        This returns a string containing 8-bit data.  The object is
        not altered in any way by this function; you can continue
        updating the object after calling this function.
        ")
                        (reparse-symbol indented_block_body) [3591 3924])
                    ("hexdigest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3943 3947]))                          
                        :documentation "Like digest(), but returns a string of hexadecimal digits instead.
        ")
                        (reparse-symbol indented_block_body) [3929 4097]))                  
                :type "class")
                nil [626 4097])
            ("new" function
               (:documentation "Create a new hashing object and return it.

    key: The starting key for the hash.
    msg: if available, will immediately be hashed into the object's starting
    state.

    You can now feed arbitrary strings into the object using its update()
    method, and can ask for the hash value at any time by calling its digest()
    method.
    "
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [4106 4109])
                    ("msg" variable nil (reparse-symbol function_parameters) [4111 4114])
                    ("digestmod" variable nil (reparse-symbol function_parameters) [4123 4132]))                  )
                nil [4098 4532]))          
    :file "hmac.py"
    :pointmax 4532
    :fsize 4531
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "functools.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"functools.py - Tools for working with functions and callable objects
\"\"\"" code nil nil [1 76])
            ("_functools" include nil nil [358 396])
            ("WRAPPER_ASSIGNMENTS" variable nil nil [510 569])
            ("WRAPPER_UPDATES" variable nil nil [570 601])
            ("update_wrapper" function
               (:documentation "Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    "
                :arguments 
                  ( ("wrapper" variable nil (reparse-symbol function_parameters) [621 628])
                    ("wrapped" variable nil (reparse-symbol function_parameters) [649 656])
                    ("assigned" variable nil (reparse-symbol function_parameters) [677 685])
                    ("updated" variable nil (reparse-symbol function_parameters) [728 735]))                  )
                nil [602 1550])
            ("wraps" function
               (:documentation "Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    "
                :arguments 
                  ( ("wrapped" variable nil (reparse-symbol function_parameters) [1561 1568])
                    ("assigned" variable nil (reparse-symbol function_parameters) [1580 1588])
                    ("updated" variable nil (reparse-symbol function_parameters) [1622 1629]))                  )
                nil [1551 2163])
            ("total_ordering" function
               (:documentation "Class decorator that fills in missing ordering methods"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2183 2186]))                  )
                nil [2164 3689])
            ("cmp_to_key" function
               (:documentation "Convert a cmp= function into a key= function"
                :arguments 
                  ( ("mycmp" variable nil (reparse-symbol function_parameters) [3705 3710]))                  )
                nil [3690 4479]))          
    :file "functools.py"
    :pointmax 4479
    :fsize 4478
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "types.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
\"\"\"" code nil nil [1 146])
            ("sys" include nil nil [147 157])
            ("NoneType" variable nil nil [408 429])
            ("TypeType" variable nil nil [430 445])
            ("ObjectType" variable nil nil [446 465])
            ("IntType" variable nil nil [467 480])
            ("LongType" variable nil nil [481 496])
            ("FloatType" variable nil nil [497 514])
            ("BooleanType" variable nil nil [515 533])
            ("try" code nil nil [534 592])
            ("StringType" variable nil nil [593 609])
            ("try" code nil nil [801 926])
            ("BufferType" variable nil nil [927 946])
            ("TupleType" variable nil nil [948 965])
            ("ListType" variable nil nil [966 981])
            ("DictType" variable nil nil [982 1014])
            ("_f" function nil nil [1016 1031])
            ("FunctionType" variable nil nil [1031 1054])
            ("LambdaType" variable nil nil [1055 1086])
            ("CodeType" variable nil nil [1118 1147])
            ("_g" function nil nil [1149 1171])
            ("GeneratorType" variable nil nil [1171 1197])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1220 1224]))                          )
                        (reparse-symbol indented_block_body) [1213 1232]))                  
                :type "class")
                nil [1199 1232])
            ("ClassType" variable nil nil [1232 1252])
            ("UnboundMethodType" variable nil nil [1253 1284])
            ("_x" variable nil nil [1314 1323])
            ("InstanceType" variable nil nil [1324 1347])
            ("MethodType" variable nil nil [1348 1372])
            ("BuiltinFunctionType" variable nil nil [1374 1405])
            ("BuiltinMethodType" variable nil nil [1406 1441])
            ("ModuleType" variable nil nil [1477 1499])
            ("FileType" variable nil nil [1500 1515])
            ("XRangeType" variable nil nil [1516 1535])
            ("try" code nil nil [1537 1681])
            ("SliceType" variable nil nil [1682 1699])
            ("EllipsisType" variable nil nil [1700 1729])
            ("DictProxyType" variable nil nil [1731 1770])
            ("NotImplementedType" variable nil nil [1771 1812])
            ("GetSetDescriptorType" variable nil nil [1866 1917])
            ("MemberDescriptorType" variable nil nil [1918 1972])
            ("del" code nil nil [1974 1997]))          
    :file "types.py"
    :pointmax 2041
    :fsize 2040
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "warnings.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("linecache" include nil nil [172 188])
            ("sys" include nil nil [189 199])
            ("types" include nil nil [200 212])
            ("__all__" variable nil nil [214 328])
            ("warnpy3k" function
               (:documentation "Issue a deprecation warning for Python 3.x related changes.

    Warnings are omitted unless Python is started with the -3 option.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [344 351])
                    ("category" variable nil (reparse-symbol function_parameters) [353 361])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [368 378]))                  )
                nil [331 670])
            ("_show_warning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [689 696])
                    ("category" variable nil (reparse-symbol function_parameters) [698 706])
                    ("filename" variable nil (reparse-symbol function_parameters) [708 716])
                    ("lineno" variable nil (reparse-symbol function_parameters) [718 724])
                    ("file" variable nil (reparse-symbol function_parameters) [726 730])
                    ("line" variable nil (reparse-symbol function_parameters) [737 741]))                  )
                nil [671 1047])
            ("showwarning" variable nil nil [1134 1161])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [1181 1188])
                    ("category" variable nil (reparse-symbol function_parameters) [1190 1198])
                    ("filename" variable nil (reparse-symbol function_parameters) [1200 1208])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1210 1216])
                    ("line" variable nil (reparse-symbol function_parameters) [1218 1222]))                  )
                nil [1163 1519])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [1539 1545])
                    ("message" variable nil (reparse-symbol function_parameters) [1547 1554])
                    ("category" variable nil (reparse-symbol function_parameters) [1559 1567])
                    ("module" variable nil (reparse-symbol function_parameters) [1577 1583])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1588 1594])
                    ("append" variable nil (reparse-symbol function_parameters) [1617 1623]))                  )
                nil [1520 2854])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",
                or \"once\"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [2872 2878])
                    ("category" variable nil (reparse-symbol function_parameters) [2880 2888])
                    ("lineno" variable nil (reparse-symbol function_parameters) [2898 2904])
                    ("append" variable nil (reparse-symbol function_parameters) [2908 2914]))                  )
                nil [2855 3709])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [3710 3827])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3918 3922]))                  
                :type "class")
                nil [3828 3923])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [4002 4006]))              ) nil [3982 4171])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [4218 4221]))              ) nil [4203 5029])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [5071 5077]))              ) nil [5056 5356])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [5400 5408]))              ) nil [5383 6216])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [6266 6273])
                    ("category" variable nil (reparse-symbol function_parameters) [6275 6283])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [6290 6300]))                  )
                nil [6257 7596])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [7615 7622])
                ("category" variable nil (reparse-symbol function_parameters) [7624 7632])
                ("filename" variable nil (reparse-symbol function_parameters) [7634 7642])
                ("lineno" variable nil (reparse-symbol function_parameters) [7644 7650])
                ("module" variable nil (reparse-symbol function_parameters) [7670 7676])
                ("registry" variable nil (reparse-symbol function_parameters) [7683 7691])
                ("module_globals" variable nil (reparse-symbol function_parameters) [7698 7712]))              ) nil [7597 9607])
            ("WarningMessage" type
               (:documentation "Holds the result of a single showwarning() call."
                :superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [9704 9808])
                    ("__init__" function
                       (:suite 
                          ( ("local_values" variable nil (reparse-symbol indented_block_body) [9921 9944])
                            ("for" code nil (reparse-symbol indented_block_body) [9953 10040])
                            ("None" code nil (reparse-symbol indented_block_body) [10105 10109]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9827 9831])
                            ("message" variable nil (reparse-symbol function_parameters) [9833 9840])
                            ("category" variable nil (reparse-symbol function_parameters) [9842 9850])
                            ("filename" variable nil (reparse-symbol function_parameters) [9852 9860])
                            ("lineno" variable nil (reparse-symbol function_parameters) [9862 9868])
                            ("file" variable nil (reparse-symbol function_parameters) [9870 9874])
                            ("line" variable nil (reparse-symbol function_parameters) [9901 9905]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9814 10110])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10127 10131]))                          )
                        (reparse-symbol indented_block_body) [10115 10358]))                  
                :type "class")
                nil [9609 10358])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11117 11357])
                            ("self" variable nil (reparse-symbol indented_block_body) [11366 11387])
                            ("module" code nil (reparse-symbol indented_block_body) [11458 11464])
                            ("self" variable nil (reparse-symbol indented_block_body) [11473 11494]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11075 11079])
                            ("record" variable nil (reparse-symbol function_parameters) [11081 11087])
                            ("module" variable nil (reparse-symbol function_parameters) [11095 11101]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11062 11495])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11513 11517]))                          )
                        (reparse-symbol indented_block_body) [11500 11795])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11814 11818]))                          )
                        (reparse-symbol indented_block_body) [11800 12349])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12367 12371])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [12373 12382]))                          )
                        (reparse-symbol indented_block_body) [12354 12592]))                  
                :type "class")
                nil [10360 12592])
            ("_warnings_defaults" variable nil nil [13044 13070])
            ("try" code nil nil [13071 13379])
            ("_processoptions" code nil nil [13405 13437])
            ("if" code nil nil [13438 14022])
            ("del" code nil nil [14022 14044]))          
    :file "warnings.py"
    :pointmax 14045
    :fsize 14044
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax '((NAME 11396 . 11400) (IF 11435 . 11437) (ELSE 11453 . 11457) (NAME 10048 . 10052) (IF 10088 . 10090) (ELSE 10100 . 10104) (NAME 1367 . 1371) (IF 1410 . 1412) (ELSE 1426 . 1430))
    )
   (semanticdb-table "sre_compile.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [225 262])
            ("_sre" include nil nil [264 280])
            ("sys" include nil nil [264 280])
            ("sre_parse" include nil nil [281 297])
            ("sre_constants" include nil nil [298 325])
            ("assert" code nil nil [327 376])
            ("if" code nil nil [378 453])
            ("_identityfunction" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [476 477]))              ) nil [454 493])
            ("_LITERAL_CODES" variable nil nil [494 538])
            ("_REPEATING_CODES" variable nil nil [539 595])
            ("_SUCCESS_CODES" variable nil nil [596 636])
            ("_ASSERT_CODES" variable nil nil [637 678])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [693 697])
                ("pattern" variable nil (reparse-symbol function_parameters) [699 706])
                ("flags" variable nil (reparse-symbol function_parameters) [708 713]))              ) nil [680 6012])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6034 6041])
                ("flags" variable nil (reparse-symbol function_parameters) [6043 6048])
                ("code" variable nil (reparse-symbol function_parameters) [6050 6054])
                ("fixup" variable nil (reparse-symbol function_parameters) [6056 6061]))              ) nil [6013 6919])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6942 6949])
                ("fixup" variable nil (reparse-symbol function_parameters) [6951 6956]))              ) nil [6920 8337])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [8353 8357]))              ) nil [8338 8669])
            ("_optimize_unicode" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [10019 10026])
                ("fixup" variable nil (reparse-symbol function_parameters) [10028 10033]))              ) nil [9997 11588])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [11601 11603]))              ) nil [11589 11732])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [11751 11755])
                ("pattern" variable nil (reparse-symbol function_parameters) [11757 11764])
                ("flags" variable nil (reparse-symbol function_parameters) [11766 11771]))              ) nil [11733 15131])
            ("try" code nil nil [15132 15253])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [15267 15270]))              ) nil [15254 15367])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15378 15379])
                ("flags" variable nil (reparse-symbol function_parameters) [15381 15386]))              ) nil [15368 15613])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15626 15627])
                ("flags" variable nil (reparse-symbol function_parameters) [15629 15634]))              ) nil [15614 16358]))          
    :file "sre_compile.py"
    :pointmax 16358
    :fsize 16357
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "sre_parse.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sys" include nil nil [345 355])
            ("sre_constants" include nil nil [357 384])
            ("SPECIAL_CHARS" variable nil nil [386 417])
            ("REPEAT_CHARS" variable nil nil [418 439])
            ("DIGITS" variable nil nil [441 467])
            ("OCTDIGITS" variable nil nil [469 496])
            ("HEXDIGITS" variable nil nil [497 538])
            ("WHITESPACE" variable nil nil [540 571])
            ("ESCAPES" variable nil nil [573 849])
            ("CATEGORIES" variable nil nil [851 1327])
            ("FLAGS" variable nil nil [1329 1571])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1683 1697])
                            ("self" variable nil (reparse-symbol indented_block_body) [1706 1720])
                            ("self" variable nil (reparse-symbol indented_block_body) [1729 1744])
                            ("self" variable nil (reparse-symbol indented_block_body) [1753 1772]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1668 1672]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1655 1773])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1791 1795])
                            ("name" variable nil (reparse-symbol function_parameters) [1797 1801]))                          )
                        (reparse-symbol indented_block_body) [1777 2214])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2233 2237])
                            ("gid" variable nil (reparse-symbol function_parameters) [2239 2242]))                          )
                        (reparse-symbol indented_block_body) [2218 2275])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2294 2298])
                            ("gid" variable nil (reparse-symbol function_parameters) [2300 2303]))                          )
                        (reparse-symbol indented_block_body) [2279 2364]))                  
                :type "class")
                nil [1573 2364])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2476 2498])
                            ("if" code nil (reparse-symbol indented_block_body) [2507 2546])
                            ("self" variable nil (reparse-symbol indented_block_body) [2554 2570])
                            ("self" variable nil (reparse-symbol indented_block_body) [2579 2596]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2441 2445])
                            ("pattern" variable nil (reparse-symbol function_parameters) [2447 2454])
                            ("data" variable nil (reparse-symbol function_parameters) [2456 2460]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2428 2597])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2610 2614])
                            ("level" variable nil (reparse-symbol function_parameters) [2616 2621]))                          )
                        (reparse-symbol indented_block_body) [2601 3557])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3574 3578]))                          )
                        (reparse-symbol indented_block_body) [3561 3612])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3628 3632]))                          )
                        (reparse-symbol indented_block_body) [3616 3665])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3685 3689])
                            ("index" variable nil (reparse-symbol function_parameters) [3691 3696]))                          )
                        (reparse-symbol indented_block_body) [3669 3728])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3748 3752])
                            ("index" variable nil (reparse-symbol function_parameters) [3754 3759]))                          )
                        (reparse-symbol indented_block_body) [3732 3893])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3913 3917])
                            ("index" variable nil (reparse-symbol function_parameters) [3919 3924])
                            ("code" variable nil (reparse-symbol function_parameters) [3926 3930]))                          )
                        (reparse-symbol indented_block_body) [3897 3965])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3980 3984])
                            ("index" variable nil (reparse-symbol function_parameters) [3986 3991])
                            ("code" variable nil (reparse-symbol function_parameters) [3993 3997]))                          )
                        (reparse-symbol indented_block_body) [3969 4038])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4053 4057])
                            ("code" variable nil (reparse-symbol function_parameters) [4059 4063]))                          )
                        (reparse-symbol indented_block_body) [4042 4097])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4114 4118]))                          )
                        (reparse-symbol indented_block_body) [4101 5322]))                  
                :type "class")
                nil [2365 5322])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5380 5400])
                            ("self" variable nil (reparse-symbol indented_block_body) [5409 5423])
                            ("self" code nil (reparse-symbol indented_block_body) [5432 5445]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5357 5361])
                            ("string" variable nil (reparse-symbol function_parameters) [5363 5369]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5344 5446])
                    ("raise" code nil (reparse-symbol indented_block_body) [7715 7761]))                  
                :type "class")
                nil [5323 7762])
            ("_escape" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [7775 7781])
                ("escape" variable nil (reparse-symbol function_parameters) [7783 7789])
                ("state" variable nil (reparse-symbol function_parameters) [7791 7796]))              ) nil [7763 9455])
            ("_parse_sub" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [9471 9477])
                ("state" variable nil (reparse-symbol function_parameters) [9479 9484])
                ("nested" variable nil (reparse-symbol function_parameters) [9486 9492]))              ) nil [9456 11081])
            ("_parse_sub_cond" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11102 11108])
                ("state" variable nil (reparse-symbol function_parameters) [11110 11115])
                ("condgroup" variable nil (reparse-symbol function_parameters) [11117 11126]))              ) nil [11082 11600])
            ("_PATTERNENDERS" variable nil nil [11601 11627])
            ("_ASSERTCHARS" variable nil nil [11628 11653])
            ("_LOOKBEHINDASSERTCHARS" variable nil nil [11654 11688])
            ("_REPEATCODES" variable nil nil [11689 11733])
            ("_parse" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11746 11752])
                ("state" variable nil (reparse-symbol function_parameters) [11754 11759]))              ) nil [11735 27055])
            ("expand_template" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [27076 27084])
                ("match" variable nil (reparse-symbol function_parameters) [27086 27091]))              ) nil [27056 27461]))          
    :file "sre_parse.py"
    :pointmax 27461
    :fsize 27460
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax '((ASSIGN 26768 . 26769) (INDENT_BLOCK 7698 . 7711) (NEWLINE 7697 . 7698) (COLON 7696 . 7697))
    )
   (semanticdb-table "random.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* Without a direct way to compute N steps forward, the semantics of
  jumpahead(n) are weakened to simply jump to another distant state and rely
  on the large period to avoid overlapping sequences.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.

\"\"\"" code nil nil [1 1111])
            ("__future__" include nil nil [1113 1144])
            ("warnings" include nil nil [1145 1179])
            ("types" include nil nil [1180 1264])
            ("math" include nil nil [1265 1341])
            ("math" include nil nil [1342 1413])
            ("os" include nil nil [1414 1448])
            ("binascii" include nil nil [1449 1489])
            ("hashlib" include nil nil [1490 1516])
            ("__all__" variable nil nil [1518 1902])
            ("NV_MAGICCONST" code nil nil [1904 1945])
            ("TWOPI" code nil nil [1946 1961])
            ("LOG4" variable nil nil [1962 1978])
            ("SG_MAGICCONST" code nil nil [1979 2010])
            ("BPF" variable nil nil [2011 2019])
            ("RECIP_BPF" variable nil nil [2055 2074])
            ("_random" include nil nil [2257 2271])
            ("Random" type
               (:documentation "Random number generator base class used by bound module functions.

    Used to instantiate instances of Random to get generators that don't
    share state.  Especially useful for multi-threaded programs, creating
    a different instance of Random for each thread, and using the jumpahead()
    method to ensure that the generated sequences seen by each thread don't
    overlap.

    Class Random can also be subclassed if you want to use a different basic
    generator of your own devising: in that case, override the following
    methods: random(), seed(), getstate(), setstate() and jumpahead().
    Optionally, implement a getrandbits() method so that randrange() can cover
    arbitrarily large ranges.

    "
                :superclasses ("_random.Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [3037 3048])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        \"\"\"" code nil (reparse-symbol indented_block_body) [3122 3229])
                            ("self" code nil (reparse-symbol indented_block_body) [3239 3251])
                            ("self" variable nil (reparse-symbol indented_block_body) [3260 3282]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3099 3103])
                            ("x" variable nil (reparse-symbol function_parameters) [3105 3106]))                          
                        :documentation "Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3086 3283])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3297 3301])
                            ("a" variable nil (reparse-symbol function_parameters) [3303 3304]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.
        ")
                        (reparse-symbol indented_block_body) [3288 3881])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3899 3903]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [3886 4055])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4073 4077])
                            ("state" variable nil (reparse-symbol function_parameters) [4079 4084]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [4060 5122])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5141 5145])
                            ("n" variable nil (reparse-symbol function_parameters) [5147 5148]))                          
                        :documentation "Change the internal state to one that is likely far away
        from the current state.  This method will not be in Py3.x,
        so it is better to simply reseed.
        ")
                        (reparse-symbol indented_block_body) [5127 5688])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5912 5916]))                          )
                        (reparse-symbol indented_block_body) [5895 5963])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5985 5989])
                            ("state" variable nil (reparse-symbol function_parameters) [5991 5996]))                          )
                        (reparse-symbol indented_block_body) [5968 6042])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6062 6066]))                          )
                        (reparse-symbol indented_block_body) [6047 6120])
                    ("randrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6201 6205])
                            ("start" variable nil (reparse-symbol function_parameters) [6207 6212])
                            ("stop" variable nil (reparse-symbol function_parameters) [6214 6218])
                            ("step" variable nil (reparse-symbol function_parameters) [6225 6229])
                            ("_int" variable nil (reparse-symbol function_parameters) [6233 6237])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [6243 6252]))                          
                        :documentation "Choose a random item from range(start, stop[, step]).

        This fixes the problem with randint() which includes the
        endpoint; in Python this is usually not what you want.

        ")
                        (reparse-symbol indented_block_body) [6187 8774])
                    ("randint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8791 8795])
                            ("a" variable nil (reparse-symbol function_parameters) [8797 8798])
                            ("b" variable nil (reparse-symbol function_parameters) [8800 8801]))                          
                        :documentation "Return random integer in range [a, b], including both end points.
        ")
                        (reparse-symbol indented_block_body) [8779 8932])
                    ("_randbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8952 8956])
                            ("n" variable nil (reparse-symbol function_parameters) [8958 8959])
                            ("_log" variable nil (reparse-symbol function_parameters) [8961 8965])
                            ("_int" variable nil (reparse-symbol function_parameters) [8972 8976])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [8982 8991])
                            ("_Method" variable nil (reparse-symbol function_parameters) [9020 9027])
                            ("_BuiltinMethod" variable nil (reparse-symbol function_parameters) [9041 9055]))                          
                        :documentation "Return a random int in the range [0,n)

        Handles the case where n has more bits than returned
        by a single call to the underlying generator.
        ")
                        (reparse-symbol indented_block_body) [8937 10094])
                    ("choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10173 10177])
                            ("seq" variable nil (reparse-symbol function_parameters) [10179 10182]))                          
                        :documentation "Choose a random element from a non-empty sequence.")
                        (reparse-symbol indented_block_body) [10162 10337])
                    ("shuffle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10354 10358])
                            ("x" variable nil (reparse-symbol function_parameters) [10360 10361])
                            ("random" variable nil (reparse-symbol function_parameters) [10363 10369]))                          
                        :documentation "x, random=random.random -> shuffle list x in place; return None.

        Optional arg random is a 0-argument function returning a random
        float in [0.0, 1.0); by default, the standard random.random.

        ")
                        (reparse-symbol indented_block_body) [10342 10878])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10894 10898])
                            ("population" variable nil (reparse-symbol function_parameters) [10900 10910])
                            ("k" variable nil (reparse-symbol function_parameters) [10912 10913]))                          
                        :documentation "Chooses k unique random elements from a population sequence.

        Returns a new list containing elements from the population while
        leaving the original population unchanged.  The resulting list is
        in selection order so that all sub-slices will also be valid random
        samples.  This allows raffle winners (the sample) to be partitioned
        into grand prize and second place winners (the subslices).

        Members of the population need not be hashable or unique.  If the
        population contains repeats, then each occurrence is a possible
        selection in the sample.

        To choose a sample in a range of integers, use xrange as an argument.
        This is especially fast and space efficient for sampling from a
        large population:   sample(xrange(10000000), 60)
        ")
                        (reparse-symbol indented_block_body) [10883 13713])
                    ("uniform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13868 13872])
                            ("a" variable nil (reparse-symbol function_parameters) [13874 13875])
                            ("b" variable nil (reparse-symbol function_parameters) [13877 13878]))                          )
                        (reparse-symbol indented_block_body) [13856 14005])
                    ("triangular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14082 14086])
                            ("low" variable nil (reparse-symbol function_parameters) [14088 14091])
                            ("high" variable nil (reparse-symbol function_parameters) [14097 14101])
                            ("mode" variable nil (reparse-symbol function_parameters) [14107 14111]))                          
                        :documentation "Triangular distribution.

        Continuous distribution bounded by given lower and upper limits,
        and having a given mode value in-between.

        http://en.wikipedia.org/wiki/Triangular_distribution

        ")
                        (reparse-symbol indented_block_body) [14067 14596])
                    ("normalvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14685 14689])
                            ("mu" variable nil (reparse-symbol function_parameters) [14691 14693])
                            ("sigma" variable nil (reparse-symbol function_parameters) [14695 14700]))                          
                        :documentation "Normal distribution.

        mu is the mean, and sigma is the standard deviation.

        ")
                        (reparse-symbol indented_block_body) [14667 15360])
                    ("lognormvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15453 15457])
                            ("mu" variable nil (reparse-symbol function_parameters) [15459 15461])
                            ("sigma" variable nil (reparse-symbol function_parameters) [15463 15468]))                          
                        :documentation "Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        ")
                        (reparse-symbol indented_block_body) [15434 15788])
                    ("expovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15880 15884])
                            ("lambd" variable nil (reparse-symbol function_parameters) [15886 15891]))                          
                        :documentation "Exponential distribution.

        lambd is 1.0 divided by the desired mean.  It should be
        nonzero.  (The parameter would be called \"lambda\", but that is
        a reserved word in Python.)  Returned values range from 0 to
        positive infinity if lambd is positive, and from negative
        infinity to 0 if lambd is negative.

        ")
                        (reparse-symbol indented_block_body) [15864 16505])
                    ("vonmisesvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16599 16603])
                            ("mu" variable nil (reparse-symbol function_parameters) [16605 16607])
                            ("kappa" variable nil (reparse-symbol function_parameters) [16609 16614]))                          
                        :documentation "Circular data distribution.

        mu is the mean angle, expressed in radians between 0 and 2*pi, and
        kappa is the concentration parameter, which must be greater than or
        equal to zero.  If kappa is equal to zero, this distribution reduces
        to a uniform random angle over the range 0 to 2*pi.

        ")
                        (reparse-symbol indented_block_body) [16579 17969])
                    ("gammavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18056 18060])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18062 18067])
                            ("beta" variable nil (reparse-symbol function_parameters) [18069 18073]))                          
                        :documentation "Gamma distribution.  Not the gamma function!

        Conditions on the parameters are alpha > 0 and beta > 0.

        The probability distribution function is:

                    x ** (alpha - 1) * math.exp(-x / beta)
          pdf(x) =  --------------------------------------
                      math.gamma(alpha) * beta ** alpha

        ")
                        (reparse-symbol indented_block_body) [18039 20263])
                    ("gauss" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20351 20355])
                            ("mu" variable nil (reparse-symbol function_parameters) [20357 20359])
                            ("sigma" variable nil (reparse-symbol function_parameters) [20361 20366]))                          
                        :documentation "Gaussian distribution.

        mu is the mean, and sigma is the standard deviation.  This is
        slightly faster than the normalvariate() function.

        Not thread-safe without a lock around calls.

        ")
                        (reparse-symbol indented_block_body) [20341 21677])
                    ("betavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22173 22177])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22179 22184])
                            ("beta" variable nil (reparse-symbol function_parameters) [22186 22190]))                          
                        :documentation "Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        ")
                        (reparse-symbol indented_block_body) [22157 22648])
                    ("paretovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22724 22728])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22730 22735]))                          
                        :documentation "Pareto distribution.  alpha is the shape parameter.")
                        (reparse-symbol indented_block_body) [22706 22900])
                    ("weibullvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22978 22982])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22984 22989])
                            ("beta" variable nil (reparse-symbol function_parameters) [22991 22995]))                          
                        :documentation "Weibull distribution.

        alpha is the scale parameter and beta is the shape parameter.

        ")
                        (reparse-symbol indented_block_body) [22959 23247]))                  
                :type "class")
                nil [2273 23247])
            ("WichmannHill" type
               (:superclasses ("Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [23340 23351])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23398 23402])
                            ("a" variable nil (reparse-symbol function_parameters) [23404 23405]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.

        If a is an int or long, a is used directly.  Distinct values between
        0 and 27814431486575L inclusive are guaranteed to yield distinct
        internal states (this guarantee is specific to the default
        Wichmann-Hill generator).
        ")
                        (reparse-symbol indented_block_body) [23389 24413])
                    ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24429 24433]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [24418 25485])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25503 25507]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [25490 25639])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25657 25661])
                            ("state" variable nil (reparse-symbol function_parameters) [25663 25668]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [25644 26050])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26069 26073])
                            ("n" variable nil (reparse-symbol function_parameters) [26075 26076]))                          
                        :documentation "Act as if n calls to random() were made, but quickly.

        n is an int, greater than or equal to 0.

        Example use:  If you have 2 threads and know that each will
        consume no more than a million random numbers, create two Random
        objects r1 and r2, then do
            r2.setstate(r1.getstate())
            r2.jumpahead(1000000)
        Then r1 and r2 will use guaranteed-disjoint segments of the full
        period.
        ")
                        (reparse-symbol indented_block_body) [26055 26818])
                    ("__whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26836 26840])
                            ("x" variable nil (reparse-symbol function_parameters) [26842 26843])
                            ("y" variable nil (reparse-symbol function_parameters) [26847 26848])
                            ("z" variable nil (reparse-symbol function_parameters) [26852 26853]))                          
                        :documentation "Set the Wichmann-Hill seed from (x, y, z).

        These must be integers in the range [0, 256).
        ")
                        (reparse-symbol indented_block_body) [26823 27622])
                    ("whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27638 27642])
                            ("a" variable nil (reparse-symbol function_parameters) [27644 27645]))                          
                        :documentation "Seed from hashable object's hash code.

        None or no argument seeds from current time.  It is not guaranteed
        that objects with distinct hash codes lead to distinct internal
        states.

        This is obsolete, provided for compatibility with the seed routine
        used prior to Python 2.1.  Use the .seed() method instead.
        ")
                        (reparse-symbol indented_block_body) [27627 28326]))                  
                :type "class")
                nil [23307 28326])
            ("SystemRandom" type
               (:documentation "Alternate random number generator using sources provided
    by the operating system (such as /dev/urandom on Unix or
    CryptGenRandom on Windows).

     Not available on all systems (see os.urandom() for details).
    "
                :superclasses ("Random")
                :members 
                  ( ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28674 28678]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [28663 28813])
                    ("getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28834 28838])
                            ("k" variable nil (reparse-symbol function_parameters) [28840 28841]))                          
                        :documentation "getrandbits(k) -> x.  Generates a long int with k random bits.")
                        (reparse-symbol indented_block_body) [28818 29293])
                    ("_stub" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29308 29312])
                            ("args" variable nil (reparse-symbol function_parameters) [29314 29319])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29321 29327]))                          )
                        (reparse-symbol indented_block_body) [29298 29421])
                    ("seed" variable nil (reparse-symbol indented_block_body) [29425 29449])
                    ("_notimplemented" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29475 29479])
                            ("args" variable nil (reparse-symbol function_parameters) [29481 29486])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29488 29494]))                          )
                        (reparse-symbol indented_block_body) [29455 29653])
                    ("getstate" variable nil (reparse-symbol indented_block_body) [29657 29694]))                  
                :type "class")
                nil [28398 29695])
            ("_test_generator" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [29775 29776])
                ("func" variable nil (reparse-symbol function_parameters) [29778 29782])
                ("args" variable nil (reparse-symbol function_parameters) [29784 29788]))              ) nil [29755 30309])
            ("_test" function (:arguments 
              ( ("N" variable nil (reparse-symbol function_parameters) [30321 30322]))              ) nil [30311 31109])
            ("_inst" variable nil nil [31441 31457])
            ("seed" variable nil nil [31458 31475])
            ("random" variable nil nil [31476 31497])
            ("uniform" variable nil nil [31498 31521])
            ("triangular" variable nil nil [31522 31551])
            ("randint" variable nil nil [31552 31575])
            ("choice" variable nil nil [31576 31597])
            ("randrange" variable nil nil [31598 31625])
            ("sample" variable nil nil [31626 31647])
            ("shuffle" variable nil nil [31648 31671])
            ("normalvariate" variable nil nil [31672 31707])
            ("lognormvariate" variable nil nil [31708 31745])
            ("expovariate" variable nil nil [31746 31777])
            ("vonmisesvariate" variable nil nil [31778 31817])
            ("gammavariate" variable nil nil [31818 31851])
            ("gauss" variable nil nil [31852 31871])
            ("betavariate" variable nil nil [31872 31903])
            ("paretovariate" variable nil nil [31904 31939])
            ("weibullvariate" variable nil nil [31940 31977])
            ("getstate" variable nil nil [31978 32003])
            ("setstate" variable nil nil [32004 32029])
            ("jumpahead" variable nil nil [32030 32057])
            ("getrandbits" variable nil nil [32058 32089])
            ("if" code nil nil [32091 32130]))          
    :file "random.py"
    :pointmax 32130
    :fsize 32129
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax '((NAME 14388 . 14389) (IF 14396 . 14398) (ELSE 14412 . 14416))
    )
   (semanticdb-table "urllib.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Open an arbitrary URL.

See the following document for more info on URLs:
\"Names and Addresses, URIs, URLs, URNs, URCs\", at
http://www.w3.org/pub/WWW/Addressing/Overview.html

See also the HTTP spec (from which the error codes are derived):
\"HTTP - Hypertext Transfer Protocol\", at
http://www.w3.org/pub/WWW/Protocols/

Related standards and specs:
- RFC1808: the \"relative URL\" spec. (authoritative status)
- RFC1738 - the \"URL standard\". (authoritative status)
- RFC1630 - the \"URI spec\". (informational status)

The object returned by URLopener().open(file) will differ per
protocol.  All you know is that is has methods read(), readline(),
readlines(), fileno(), close() and info().  The read*(), fileno()
and close() methods work like those of open files.
The info() method returns a mimetools.Message object which can be
used to query various info about the object, if available.
(mimetools.Message objects are queried with the getheader() method.)
\"\"\"" code nil nil [1 962])
            ("string" include nil nil [964 977])
            ("socket" include nil nil [978 991])
            ("os" include nil nil [992 1001])
            ("time" include nil nil [1002 1013])
            ("sys" include nil nil [1014 1024])
            ("base64" include nil nil [1025 1038])
            ("re" include nil nil [1039 1048])
            ("urlparse" include nil nil [1050 1090])
            ("__all__" variable nil nil [1092 1542])
            ("__version__" variable nil nil [1544 1564])
            ("MAXFTPCACHE" variable nil nil [1614 1630])
            ("if" code nil nil [1707 2280])
            ("_urlopener" variable nil nil [2544 2561])
            ("urlopen" function
               (:documentation "Create a file-like object for the specified URL to read from."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [2574 2577])
                    ("data" variable nil (reparse-symbol function_parameters) [2579 2583])
                    ("proxies" variable nil (reparse-symbol function_parameters) [2590 2597]))                  )
                nil [2562 3161])
            ("urlretrieve" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [3177 3180])
                ("filename" variable nil (reparse-symbol function_parameters) [3182 3190])
                ("reporthook" variable nil (reparse-symbol function_parameters) [3197 3207])
                ("data" variable nil (reparse-symbol function_parameters) [3214 3218]))              ) nil [3161 3373])
            ("urlcleanup" function nil nil [3373 3486])
            ("try" code nil nil [3503 3580])
            ("ContentTooShortError" type
               (:superclasses ("IOError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IOError" code nil (reparse-symbol indented_block_body) [3738 3769])
                            ("self" variable nil (reparse-symbol indented_block_body) [3778 3800]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3705 3709])
                            ("message" variable nil (reparse-symbol function_parameters) [3711 3718])
                            ("content" variable nil (reparse-symbol function_parameters) [3720 3727]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3692 3801]))                  
                :type "class")
                nil [3651 3801])
            ("ftpcache" variable nil nil [3802 3815])
            ("URLopener" type
               (:documentation "Class to open URLs.
    This is a class rather than just a subroutine because we may need
    more than one set of global protocol-specific options.
    Note -- this is a base class for those who don't want the
    automatic handling of errors type 302 (relocated) and 401
    (authorization needed)."
                :members 
                  ( ("__tempfiles" variable nil (reparse-symbol indented_block_body) [4149 4167])
                    ("version" code nil (reparse-symbol indented_block_body) [4173 4215])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [4289 4344])
                            ("assert" code nil (reparse-symbol indented_block_body) [4352 4415])
                            ("self" variable nil (reparse-symbol indented_block_body) [4424 4446])
                            ("self" variable nil (reparse-symbol indented_block_body) [4455 4491])
                            ("self" variable nil (reparse-symbol indented_block_body) [4500 4538])
                            ("self" variable nil (reparse-symbol indented_block_body) [4547 4595])
                            ("self" variable nil (reparse-symbol indented_block_body) [4604 4625])
                            ("self" variable nil (reparse-symbol indented_block_body) [4634 4659])
                            ("self" variable nil (reparse-symbol indented_block_body) [4684 4705])
                            ("self" variable nil (reparse-symbol indented_block_body) [5026 5050]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4252 4256])
                            ("proxies" variable nil (reparse-symbol function_parameters) [4258 4265])
                            ("x509" variable nil (reparse-symbol function_parameters) [4272 4278]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4239 5051])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5287 5291]))                          )
                        (reparse-symbol indented_block_body) [5275 5315])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5330 5334]))                          )
                        (reparse-symbol indented_block_body) [5320 5360])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5377 5381]))                          )
                        (reparse-symbol indented_block_body) [5365 5829])
                    ("addheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5848 5852])
                            ("args" variable nil (reparse-symbol function_parameters) [5854 5859]))                          
                        :documentation "Add a header to be used by the HTTP interface only
        e.g. u.addheader('Accept', 'sound/basic')")
                        (reparse-symbol indented_block_body) [5834 6014])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6053 6057])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [6059 6066])
                            ("data" variable nil (reparse-symbol function_parameters) [6068 6072]))                          
                        :documentation "Use URLopener().open(file) instead of open(file, 'r').")
                        (reparse-symbol indented_block_body) [6044 7506])
                    ("open_unknown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7528 7532])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [7534 7541])
                            ("data" variable nil (reparse-symbol function_parameters) [7543 7547]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7511 7719])
                    ("open_unknown_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7747 7751])
                            ("proxy" variable nil (reparse-symbol function_parameters) [7753 7758])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [7760 7767])
                            ("data" variable nil (reparse-symbol function_parameters) [7769 7773]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7724 7957])
                    ("retrieve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8000 8004])
                            ("url" variable nil (reparse-symbol function_parameters) [8006 8009])
                            ("filename" variable nil (reparse-symbol function_parameters) [8011 8019])
                            ("reporthook" variable nil (reparse-symbol function_parameters) [8026 8036])
                            ("data" variable nil (reparse-symbol function_parameters) [8043 8047]))                          
                        :documentation "retrieve(url) returns (filename, headers) for a local object
        or (tempfilename, headers) for a remote object.")
                        (reparse-symbol indented_block_body) [7987 10424])
                    ("open_http" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10515 10519])
                            ("url" variable nil (reparse-symbol function_parameters) [10521 10524])
                            ("data" variable nil (reparse-symbol function_parameters) [10526 10530]))                          
                        :documentation "Use HTTP protocol.")
                        (reparse-symbol indented_block_body) [10501 13423])
                    ("http_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13443 13447])
                            ("url" variable nil (reparse-symbol function_parameters) [13449 13452])
                            ("fp" variable nil (reparse-symbol function_parameters) [13454 13456])
                            ("errcode" variable nil (reparse-symbol function_parameters) [13458 13465])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [13467 13473])
                            ("headers" variable nil (reparse-symbol function_parameters) [13475 13482])
                            ("data" variable nil (reparse-symbol function_parameters) [13484 13488]))                          
                        :documentation "Handle http errors.
        Derived class can override this, or provide specific handlers
        named http_error_DDD where DDD is the 3-digit error code.")
                        (reparse-symbol indented_block_body) [13428 14145])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14173 14177])
                            ("url" variable nil (reparse-symbol function_parameters) [14179 14182])
                            ("fp" variable nil (reparse-symbol function_parameters) [14184 14186])
                            ("errcode" variable nil (reparse-symbol function_parameters) [14188 14195])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [14197 14203])
                            ("headers" variable nil (reparse-symbol function_parameters) [14205 14212]))                          
                        :documentation "Default error handler: close the connection and raise IOError.")
                        (reparse-symbol indented_block_body) [14150 14375])
                    ("if" code nil (reparse-symbol indented_block_body) [14380 17649])
                    ("open_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17668 17672])
                            ("url" variable nil (reparse-symbol function_parameters) [17674 17677]))                          
                        :documentation "Use local file or FTP depending on form of URL.")
                        (reparse-symbol indented_block_body) [17654 18065])
                    ("open_local_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18090 18094])
                            ("url" variable nil (reparse-symbol function_parameters) [18096 18099]))                          
                        :documentation "Use local file.")
                        (reparse-symbol indented_block_body) [18070 19605])
                    ("open_ftp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19623 19627])
                            ("url" variable nil (reparse-symbol function_parameters) [19629 19632]))                          
                        :documentation "Use FTP protocol.")
                        (reparse-symbol indented_block_body) [19610 22068])
                    ("open_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22087 22091])
                            ("url" variable nil (reparse-symbol function_parameters) [22093 22096])
                            ("data" variable nil (reparse-symbol function_parameters) [22098 22102]))                          
                        :documentation "Use \"data\" URL.")
                        (reparse-symbol indented_block_body) [22073 23734]))                  
                :type "class")
                nil [3816 23734])
            ("FancyURLopener" type
               (:documentation "Derived class with handlers for errors we can handle (perhaps)."
                :superclasses ("URLopener")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("URLopener" code nil (reparse-symbol indented_block_body) [23893 23934])
                            ("self" variable nil (reparse-symbol indented_block_body) [23943 23963])
                            ("self" variable nil (reparse-symbol indented_block_body) [23972 23986])
                            ("self" variable nil (reparse-symbol indented_block_body) [23995 24013]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23861 23865])
                            ("args" variable nil (reparse-symbol function_parameters) [23867 23872])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23874 23882]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23848 24014])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24042 24046])
                            ("url" variable nil (reparse-symbol function_parameters) [24048 24051])
                            ("fp" variable nil (reparse-symbol function_parameters) [24053 24055])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24057 24064])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24066 24072])
                            ("headers" variable nil (reparse-symbol function_parameters) [24074 24081]))                          
                        :documentation "Default error handling -- don't raise an exception.")
                        (reparse-symbol indented_block_body) [24019 24213])
                    ("http_error_302" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24237 24241])
                            ("url" variable nil (reparse-symbol function_parameters) [24243 24246])
                            ("fp" variable nil (reparse-symbol function_parameters) [24248 24250])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24252 24259])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24261 24267])
                            ("headers" variable nil (reparse-symbol function_parameters) [24269 24276])
                            ("data" variable nil (reparse-symbol function_parameters) [24278 24282]))                          
                        :documentation "Error 302 -- relocated (temporarily).")
                        (reparse-symbol indented_block_body) [24218 24889])
                    ("redirect_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24916 24920])
                            ("url" variable nil (reparse-symbol function_parameters) [24922 24925])
                            ("fp" variable nil (reparse-symbol function_parameters) [24927 24929])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24931 24938])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24940 24946])
                            ("headers" variable nil (reparse-symbol function_parameters) [24948 24955])
                            ("data" variable nil (reparse-symbol function_parameters) [24957 24961]))                          )
                        (reparse-symbol indented_block_body) [24894 25833])
                    ("http_error_301" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25857 25861])
                            ("url" variable nil (reparse-symbol function_parameters) [25863 25866])
                            ("fp" variable nil (reparse-symbol function_parameters) [25868 25870])
                            ("errcode" variable nil (reparse-symbol function_parameters) [25872 25879])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [25881 25887])
                            ("headers" variable nil (reparse-symbol function_parameters) [25889 25896])
                            ("data" variable nil (reparse-symbol function_parameters) [25898 25902]))                          
                        :documentation "Error 301 -- also relocated (permanently).")
                        (reparse-symbol indented_block_body) [25838 26043])
                    ("http_error_303" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26067 26071])
                            ("url" variable nil (reparse-symbol function_parameters) [26073 26076])
                            ("fp" variable nil (reparse-symbol function_parameters) [26078 26080])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26082 26089])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26091 26097])
                            ("headers" variable nil (reparse-symbol function_parameters) [26099 26106])
                            ("data" variable nil (reparse-symbol function_parameters) [26108 26112]))                          
                        :documentation "Error 303 -- also relocated (essentially identical to 302).")
                        (reparse-symbol indented_block_body) [26048 26270])
                    ("http_error_307" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26294 26298])
                            ("url" variable nil (reparse-symbol function_parameters) [26300 26303])
                            ("fp" variable nil (reparse-symbol function_parameters) [26305 26307])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26309 26316])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26318 26324])
                            ("headers" variable nil (reparse-symbol function_parameters) [26326 26333])
                            ("data" variable nil (reparse-symbol function_parameters) [26335 26339]))                          
                        :documentation "Error 307 -- relocated, but turn POST into error.")
                        (reparse-symbol indented_block_body) [26275 26608])
                    ("http_error_401" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26632 26636])
                            ("url" variable nil (reparse-symbol function_parameters) [26638 26641])
                            ("fp" variable nil (reparse-symbol function_parameters) [26643 26645])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26647 26654])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26656 26662])
                            ("headers" variable nil (reparse-symbol function_parameters) [26664 26671])
                            ("data" variable nil (reparse-symbol function_parameters) [26673 26677]))                          
                        :documentation "Error 401 -- authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [26613 27640])
                    ("http_error_407" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27664 27668])
                            ("url" variable nil (reparse-symbol function_parameters) [27670 27673])
                            ("fp" variable nil (reparse-symbol function_parameters) [27675 27677])
                            ("errcode" variable nil (reparse-symbol function_parameters) [27679 27686])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [27688 27694])
                            ("headers" variable nil (reparse-symbol function_parameters) [27696 27703])
                            ("data" variable nil (reparse-symbol function_parameters) [27705 27709]))                          
                        :documentation "Error 407 -- proxy authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [27645 28688])
                    ("retry_proxy_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28725 28729])
                            ("url" variable nil (reparse-symbol function_parameters) [28731 28734])
                            ("realm" variable nil (reparse-symbol function_parameters) [28736 28741])
                            ("data" variable nil (reparse-symbol function_parameters) [28743 28747]))                          )
                        (reparse-symbol indented_block_body) [28693 29437])
                    ("retry_proxy_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29475 29479])
                            ("url" variable nil (reparse-symbol function_parameters) [29481 29484])
                            ("realm" variable nil (reparse-symbol function_parameters) [29486 29491])
                            ("data" variable nil (reparse-symbol function_parameters) [29493 29497]))                          )
                        (reparse-symbol indented_block_body) [29442 30191])
                    ("retry_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30222 30226])
                            ("url" variable nil (reparse-symbol function_parameters) [30228 30231])
                            ("realm" variable nil (reparse-symbol function_parameters) [30233 30238])
                            ("data" variable nil (reparse-symbol function_parameters) [30240 30244]))                          )
                        (reparse-symbol indented_block_body) [30196 30696])
                    ("retry_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30728 30732])
                            ("url" variable nil (reparse-symbol function_parameters) [30734 30737])
                            ("realm" variable nil (reparse-symbol function_parameters) [30739 30744])
                            ("data" variable nil (reparse-symbol function_parameters) [30746 30750]))                          )
                        (reparse-symbol indented_block_body) [30701 31203])
                    ("get_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31228 31232])
                            ("host" variable nil (reparse-symbol function_parameters) [31234 31238])
                            ("realm" variable nil (reparse-symbol function_parameters) [31240 31245])
                            ("clear_cache" variable nil (reparse-symbol function_parameters) [31247 31258]))                          )
                        (reparse-symbol indented_block_body) [31208 31623])
                    ("prompt_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31651 31655])
                            ("host" variable nil (reparse-symbol function_parameters) [31657 31661])
                            ("realm" variable nil (reparse-symbol function_parameters) [31663 31668]))                          
                        :documentation "Override this in a GUI environment!")
                        (reparse-symbol indented_block_body) [31628 32127]))                  
                :type "class")
                nil [23736 32127])
            ("_localhost" variable nil nil [32150 32167])
            ("localhost" function (:documentation "Return the IP address of the magic hostname 'localhost'.") nil [32168 32378])
            ("_thishost" variable nil nil [32379 32395])
            ("thishost" function (:documentation "Return the IP address of the current host.") nil [32396 32703])
            ("_ftperrors" variable nil nil [32704 32721])
            ("ftperrors" function (:documentation "Return the set of errors raised by the FTP class.") nil [32722 32931])
            ("_noheaders" variable nil nil [32932 32949])
            ("noheaders" function (:documentation "Return an empty mimetools.Message object.") nil [32950 33353])
            ("ftpwrapper" type
               (:documentation "Class used by open_ftp() for cache of open FTP connections."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [33618 33634])
                            ("self" variable nil (reparse-symbol indented_block_body) [33643 33663])
                            ("self" variable nil (reparse-symbol indented_block_body) [33672 33688])
                            ("self" variable nil (reparse-symbol indented_block_body) [33697 33713])
                            ("self" variable nil (reparse-symbol indented_block_body) [33722 33738])
                            ("self" variable nil (reparse-symbol indented_block_body) [33747 33769])
                            ("self" variable nil (reparse-symbol indented_block_body) [33778 33795])
                            ("self" variable nil (reparse-symbol indented_block_body) [33804 33831])
                            ("self" code nil (reparse-symbol indented_block_body) [33840 33851]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33480 33484])
                            ("user" variable nil (reparse-symbol function_parameters) [33486 33490])
                            ("passwd" variable nil (reparse-symbol function_parameters) [33492 33498])
                            ("host" variable nil (reparse-symbol function_parameters) [33500 33504])
                            ("port" variable nil (reparse-symbol function_parameters) [33506 33510])
                            ("dirs" variable nil (reparse-symbol function_parameters) [33512 33516])
                            ("timeout" variable nil (reparse-symbol function_parameters) [33535 33542])
                            ("persistent" variable nil (reparse-symbol function_parameters) [33592 33602]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33467 33852])
                    ("init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33866 33870]))                          )
                        (reparse-symbol indented_block_body) [33857 34125])
                    ("retrfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34143 34147])
                            ("file" variable nil (reparse-symbol function_parameters) [34149 34153])
                            ("type" variable nil (reparse-symbol function_parameters) [34155 34159]))                          )
                        (reparse-symbol indented_block_body) [34130 35725])
                    ("endtransfer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35746 35750]))                          )
                        (reparse-symbol indented_block_body) [35730 35910])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35925 35929]))                          )
                        (reparse-symbol indented_block_body) [35915 36024])
                    ("file_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36044 36048]))                          )
                        (reparse-symbol indented_block_body) [36029 36189])
                    ("real_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36209 36213]))                          )
                        (reparse-symbol indented_block_body) [36194 36330]))                  
                :type "class")
                nil [33374 36330])
            ("addbase" type
               (:documentation "Base class for addinfo and addclosehook."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [36434 36446])
                            ("self" variable nil (reparse-symbol indented_block_body) [36455 36479])
                            ("self" variable nil (reparse-symbol indented_block_body) [36488 36520])
                            ("if" code nil (reparse-symbol indented_block_body) [36529 36598])
                            ("if" code nil (reparse-symbol indented_block_body) [36606 36731])
                            ("if" code nil (reparse-symbol indented_block_body) [36739 36899]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36415 36419])
                            ("fp" variable nil (reparse-symbol function_parameters) [36421 36423]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36402 36899])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36917 36921]))                          )
                        (reparse-symbol indented_block_body) [36904 37058])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37073 37077]))                          )
                        (reparse-symbol indented_block_body) [37063 37250]))                  
                :type "class")
                nil [36331 37250])
            ("addclosehook" type
               (:documentation "Class to add a close hook to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37392 37418])
                            ("self" variable nil (reparse-symbol indented_block_body) [37427 37453])
                            ("self" variable nil (reparse-symbol indented_block_body) [37462 37486]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37351 37355])
                            ("fp" variable nil (reparse-symbol function_parameters) [37357 37359])
                            ("closehook" variable nil (reparse-symbol function_parameters) [37361 37370])
                            ("hookargs" variable nil (reparse-symbol function_parameters) [37372 37381]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37338 37487])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37502 37506]))                          )
                        (reparse-symbol indented_block_body) [37492 37674]))                  
                :type "class")
                nil [37251 37674])
            ("addinfo" type
               (:documentation "class to add an info() method to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37802 37828])
                            ("self" variable nil (reparse-symbol indented_block_body) [37837 37859]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37774 37778])
                            ("fp" variable nil (reparse-symbol function_parameters) [37780 37782])
                            ("headers" variable nil (reparse-symbol function_parameters) [37784 37791]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37761 37860])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37874 37878]))                          )
                        (reparse-symbol indented_block_body) [37865 37909]))                  
                :type "class")
                nil [37675 37909])
            ("addinfourl" type
               (:documentation "class to add info() and geturl() methods to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [38067 38093])
                            ("self" variable nil (reparse-symbol indented_block_body) [38102 38124])
                            ("self" variable nil (reparse-symbol indented_block_body) [38133 38147])
                            ("self" variable nil (reparse-symbol indented_block_body) [38156 38172]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38023 38027])
                            ("fp" variable nil (reparse-symbol function_parameters) [38029 38031])
                            ("headers" variable nil (reparse-symbol function_parameters) [38033 38040])
                            ("url" variable nil (reparse-symbol function_parameters) [38042 38045])
                            ("code" variable nil (reparse-symbol function_parameters) [38047 38051]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38010 38173])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38187 38191]))                          )
                        (reparse-symbol indented_block_body) [38178 38222])
                    ("getcode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38239 38243]))                          )
                        (reparse-symbol indented_block_body) [38227 38271])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38287 38291]))                          )
                        (reparse-symbol indented_block_body) [38276 38318]))                  
                :type "class")
                nil [37910 38318])
            ("try" code nil nil [39057 39201])
            ("toBytes" function
               (:documentation "toBytes(u\"URL\") --> 'URL'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39214 39217]))                  )
                nil [39202 39585])
            ("unwrap" function
               (:documentation "unwrap('<URL:type://host/path>') --> 'type://host/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39597 39600]))                  )
                nil [39586 39830])
            ("_typeprog" variable nil nil [39831 39847])
            ("splittype" function
               (:documentation "splittype('type:opaquestring') --> 'type', 'opaquestring'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39862 39865]))                  )
                nil [39848 40201])
            ("_hostprog" variable nil nil [40202 40218])
            ("splithost" function
               (:documentation "splithost('//host[:port]/path') --> 'host[:port]', '/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [40233 40236]))                  )
                nil [40219 40666])
            ("_userprog" variable nil nil [40667 40683])
            ("splituser" function
               (:documentation "splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [40698 40702]))                  )
                nil [40684 40997])
            ("_passwdprog" variable nil nil [40998 41016])
            ("splitpasswd" function
               (:documentation "splitpasswd('user:passwd') -> 'user', 'passwd'."
                :arguments 
                  ( ("user" variable nil (reparse-symbol function_parameters) [41033 41037]))                  )
                nil [41017 41321])
            ("_portprog" variable nil nil [41365 41381])
            ("splitport" function
               (:documentation "splitport('host:port') --> 'host', 'port'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [41396 41400]))                  )
                nil [41382 41725])
            ("_nportprog" variable nil nil [41726 41743])
            ("splitnport" function
               (:documentation "Split host and port, returning numeric port.
    Return given default port if no ':' found; defaults to -1.
    Return numerical port if a valid number are found after ':'.
    Return None if ':' but not a valid number."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [41759 41763])
                    ("defport" variable nil (reparse-symbol function_parameters) [41765 41772]))                  )
                nil [41744 42395])
            ("_queryprog" variable nil nil [42396 42413])
            ("splitquery" function
               (:documentation "splitquery('/path?query') --> '/path', 'query'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42429 42432]))                  )
                nil [42414 42706])
            ("_tagprog" variable nil nil [42707 42722])
            ("splittag" function
               (:documentation "splittag('/path#tag') --> '/path', 'tag'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42736 42739]))                  )
                nil [42723 42998])
            ("splitattr" function
               (:documentation "splitattr('/path;attr1=value1;attr2=value2;...') ->
        '/path', ['attr1=value1', 'attr2=value2', ...]."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [43013 43016]))                  )
                nil [42999 43195])
            ("_valueprog" variable nil nil [43196 43213])
            ("splitvalue" function
               (:documentation "splitvalue('attr=value') --> 'attr', 'value'."
                :arguments 
                  ( ("attr" variable nil (reparse-symbol function_parameters) [43229 43233]))                  )
                nil [43214 43506])
            ("_hexdig" variable nil nil [43699 43733])
            ("_hextochr" variable nil nil [43734 43831])
            ("_asciire" variable nil nil [43832 43871])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [43885 43886]))                  )
                nil [43873 44578])
            ("unquote_plus" function
               (:documentation "unquote('%7e/abc+def') -> '~/abc def'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [44596 44597]))                  )
                nil [44579 44698])
            ("always_safe" variable nil nil [44699 44821])
            ("_safe_map" variable nil nil [44822 44836])
            ("for" code nil nil [44837 44976])
            ("_safe_quoters" variable nil nil [44976 44994])
            ("quote" function
               (:documentation "quote('abc def') -> 'abc%20def'

    Each part of a URL, e.g. the path info, the query, etc., has a
    different set of reserved characters that must be quoted.

    RFC 2396 Uniform Resource Identifiers (URI): Generic Syntax lists
    the following reserved characters.

    reserved    = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" |
                  \"$\" | \",\"

    Each of these characters is reserved in some component of a URL,
    but not necessarily in all of them.

    By default, the quote function is intended for quoting the path
    section of a URL.  Thus, it will not encode '/'.  This character
    is reserved, but in typical usage the quote function is being
    called on a path where the existing slash characters are used as
    reserved characters.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [45006 45007])
                    ("safe" variable nil (reparse-symbol function_parameters) [45009 45013]))                  )
                nil [44996 46336])
            ("quote_plus" function
               (:documentation "Quote the query fragment of a URL; replacing ' ' with '+'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [46352 46353])
                    ("safe" variable nil (reparse-symbol function_parameters) [46355 46359]))                  )
                nil [46337 46544])
            ("urlencode" function
               (:documentation "Encode a sequence of two-element tuples or dictionary into a URL query string.

    If any values in the query arg are sequences and doseq is true, each
    sequence element is converted to a separate parameter.

    If the query arg is a sequence of two-element tuples, the order of the
    parameters in the output will match the order of parameters in the
    input.
    "
                :arguments 
                  ( ("query" variable nil (reparse-symbol function_parameters) [46559 46564])
                    ("doseq" variable nil (reparse-symbol function_parameters) [46566 46571]))                  )
                nil [46545 48972])
            ("getproxies_environment" function (:documentation "Return a dictionary of scheme -> proxy server URL mappings.

    Scan the environment for variables named <scheme>_proxy;
    this seems to be the standard convention.  If you need a
    different way, you can pass a proxies dictionary to the
    [Fancy]URLopener constructor.

    ") nil [48990 49503])
            ("proxy_bypass_environment" function
               (:documentation "Test if proxies should not be used for a particular host.

    Checks the environment for a variable named no_proxy, which should
    be a list of DNS suffixes separated by commas, or '*' for all hosts.
    "
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [49533 49537]))                  )
                nil [49504 50278])
            ("if" code nil nil [50280 57691])
            ("test1" function nil nil [57730 58020])
            ("reporthook" function (:arguments 
              ( ("blocknum" variable nil (reparse-symbol function_parameters) [58037 58045])
                ("blocksize" variable nil (reparse-symbol function_parameters) [58047 58056])
                ("totalsize" variable nil (reparse-symbol function_parameters) [58058 58067]))              ) nil [58022 58212]))          
    :file "urllib.py"
    :pointmax 58212
    :fsize 58211
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax '((NAME 44900 . 44909) (IF 44917 . 44919) (ELSE 44951 . 44955))
    )
   (semanticdb-table "quopri.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Conversions to/from quoted-printable transport encoding as per RFC 1521.\"\"\"" code nil nil [24 102])
            ("__all__" variable nil nil [127 189])
            ("ESCAPE" variable nil nil [191 203])
            ("MAXLINESIZE" variable nil nil [204 220])
            ("HEX" variable nil nil [221 245])
            ("EMPTYSTRING" variable nil nil [246 262])
            ("try" code nil nil [264 365])
            ("needsquoting" function
               (:documentation "Decide whether a particular character needs to be quoted.

    The 'quotetabs' flag indicates whether embedded tabs and spaces should be
    quoted.  Note that line-ending tabs and spaces are always encoded, as per
    RFC 1521.
    "
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [384 385])
                    ("quotetabs" variable nil (reparse-symbol function_parameters) [387 396])
                    ("header" variable nil (reparse-symbol function_parameters) [398 404]))                  )
                nil [367 853])
            ("quote" function
               (:documentation "Quote a single character."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [864 865]))                  )
                nil [854 962])
            ("encode" function
               (:documentation "Read 'input', apply quoted-printable encoding, and write to 'output'.

    'input' and 'output' are files with readline() and write() methods.
    The 'quotetabs' flag indicates whether embedded tabs and spaces should be
    quoted.  Note that line-ending tabs and spaces are always encoded, as per
    RFC 1521.
    The 'header' flag indicates whether we are encoding spaces as _ as per
    RFC 1522.
    "
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [976 981])
                    ("output" variable nil (reparse-symbol function_parameters) [983 989])
                    ("quotetabs" variable nil (reparse-symbol function_parameters) [991 1000])
                    ("header" variable nil (reparse-symbol function_parameters) [1002 1008]))                  )
                nil [965 3300])
            ("encodestring" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [3318 3319])
                ("quotetabs" variable nil (reparse-symbol function_parameters) [3321 3330])
                ("header" variable nil (reparse-symbol function_parameters) [3336 3342]))              ) nil [3301 3593])
            ("decode" function
               (:documentation "Read 'input', apply quoted-printable decoding, and write to 'output'.
    'input' and 'output' are files with readline() and write() methods.
    If 'header' is true, decode underscore as space (per RFC 1522)."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [3607 3612])
                    ("output" variable nil (reparse-symbol function_parameters) [3614 3620])
                    ("header" variable nil (reparse-symbol function_parameters) [3622 3628]))                  )
                nil [3596 5047])
            ("decodestring" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [5065 5066])
                ("header" variable nil (reparse-symbol function_parameters) [5068 5074]))              ) nil [5048 5300])
            ("ishex" function
               (:documentation "Return true if the character 'c' is a hexadecimal digit."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [5338 5339]))                  )
                nil [5328 5474])
            ("unhex" function
               (:documentation "Get the integer value of a hexadecimal number."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5485 5486]))                  )
                nil [5475 5830])
            ("main" function nil nil [5833 6928])
            ("if" code nil nil [6931 6969]))          
    :file "quopri.py"
    :pointmax 6969
    :fsize 6968
    :lastmodtime '(21294 8947 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "struct.py"
    :major-mode 'python-mode
    :tags 
        '( ("_struct" include nil nil [1 22])
            ("_struct" include nil nil [23 54])
            ("_struct" include nil nil [55 82]))          
    :file "struct.py"
    :pointmax 83
    :fsize 82
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "linecache.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Cache lines from files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 188])
            ("sys" include nil nil [190 200])
            ("os" include nil nil [201 210])
            ("__all__" variable nil nil [212 261])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [275 283])
                ("lineno" variable nil (reparse-symbol function_parameters) [285 291])
                ("module_globals" variable nil (reparse-symbol function_parameters) [293 307]))              ) nil [263 455])
            ("cache" variable nil nil [470 480])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [495 582])
            ("getlines" function
               (:documentation "Get the lines for a file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [597 605])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [607 621]))                  )
                nil [584 879])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [896 904]))                  )
                nil [881 1572])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1590 1598])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [1600 1614]))                  )
                nil [1574 4119]))          
    :file "linecache.py"
    :pointmax 4119
    :fsize 4118
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "sre_constants.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("try" code nil nil [399 510])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [617 621]))                  
                :type "class")
                nil [589 622])
            ("FAILURE" variable nil nil [636 655])
            ("SUCCESS" variable nil nil [656 675])
            ("ANY" variable nil nil [677 688])
            ("ANY_ALL" variable nil nil [689 708])
            ("ASSERT" variable nil nil [709 726])
            ("ASSERT_NOT" variable nil nil [727 752])
            ("AT" variable nil nil [753 762])
            ("BIGCHARSET" variable nil nil [763 788])
            ("BRANCH" variable nil nil [789 806])
            ("CALL" variable nil nil [807 820])
            ("CATEGORY" variable nil nil [821 842])
            ("CHARSET" variable nil nil [843 862])
            ("GROUPREF" variable nil nil [863 884])
            ("GROUPREF_IGNORE" variable nil nil [885 920])
            ("GROUPREF_EXISTS" variable nil nil [921 956])
            ("IN" variable nil nil [957 966])
            ("IN_IGNORE" variable nil nil [967 990])
            ("INFO" variable nil nil [991 1004])
            ("JUMP" variable nil nil [1005 1018])
            ("LITERAL" variable nil nil [1019 1038])
            ("LITERAL_IGNORE" variable nil nil [1039 1072])
            ("MARK" variable nil nil [1073 1086])
            ("MAX_REPEAT" variable nil nil [1087 1112])
            ("MAX_UNTIL" variable nil nil [1113 1136])
            ("MIN_REPEAT" variable nil nil [1137 1162])
            ("MIN_UNTIL" variable nil nil [1163 1186])
            ("NEGATE" variable nil nil [1187 1204])
            ("NOT_LITERAL" variable nil nil [1205 1232])
            ("NOT_LITERAL_IGNORE" variable nil nil [1233 1274])
            ("RANGE" variable nil nil [1275 1290])
            ("REPEAT" variable nil nil [1291 1308])
            ("REPEAT_ONE" variable nil nil [1309 1334])
            ("SUBPATTERN" variable nil nil [1335 1360])
            ("MIN_REPEAT_ONE" variable nil nil [1361 1394])
            ("AT_BEGINNING" variable nil nil [1408 1437])
            ("AT_BEGINNING_LINE" variable nil nil [1438 1477])
            ("AT_BEGINNING_STRING" variable nil nil [1478 1521])
            ("AT_BOUNDARY" variable nil nil [1522 1549])
            ("AT_NON_BOUNDARY" variable nil nil [1550 1585])
            ("AT_END" variable nil nil [1586 1603])
            ("AT_END_LINE" variable nil nil [1604 1631])
            ("AT_END_STRING" variable nil nil [1632 1663])
            ("AT_LOC_BOUNDARY" variable nil nil [1664 1699])
            ("AT_LOC_NON_BOUNDARY" variable nil nil [1700 1743])
            ("AT_UNI_BOUNDARY" variable nil nil [1744 1779])
            ("AT_UNI_NON_BOUNDARY" variable nil nil [1780 1823])
            ("CATEGORY_DIGIT" variable nil nil [1838 1871])
            ("CATEGORY_NOT_DIGIT" variable nil nil [1872 1913])
            ("CATEGORY_SPACE" variable nil nil [1914 1947])
            ("CATEGORY_NOT_SPACE" variable nil nil [1948 1989])
            ("CATEGORY_WORD" variable nil nil [1990 2021])
            ("CATEGORY_NOT_WORD" variable nil nil [2022 2061])
            ("CATEGORY_LINEBREAK" variable nil nil [2062 2103])
            ("CATEGORY_NOT_LINEBREAK" variable nil nil [2104 2153])
            ("CATEGORY_LOC_WORD" variable nil nil [2154 2193])
            ("CATEGORY_LOC_NOT_WORD" variable nil nil [2194 2241])
            ("CATEGORY_UNI_DIGIT" variable nil nil [2242 2283])
            ("CATEGORY_UNI_NOT_DIGIT" variable nil nil [2284 2333])
            ("CATEGORY_UNI_SPACE" variable nil nil [2334 2375])
            ("CATEGORY_UNI_NOT_SPACE" variable nil nil [2376 2425])
            ("CATEGORY_UNI_WORD" variable nil nil [2426 2465])
            ("CATEGORY_UNI_NOT_WORD" variable nil nil [2466 2513])
            ("CATEGORY_UNI_LINEBREAK" variable nil nil [2514 2563])
            ("CATEGORY_UNI_NOT_LINEBREAK" variable nil nil [2564 2621])
            ("OPCODES" variable nil nil [2623 3120])
            ("ATCODES" variable nil nil [3122 3346])
            ("CHCODES" variable nil nil [3348 3762])
            ("makedict" function (:arguments 
              ( ("list" variable nil (reparse-symbol function_parameters) [3777 3781]))              ) nil [3764 3878])
            ("OPCODES" variable nil nil [3879 3906])
            ("ATCODES" variable nil nil [3907 3934])
            ("CHCODES" variable nil nil [3935 3962])
            ("OP_IGNORE" variable nil nil [4012 4142])
            ("AT_MULTILINE" variable nil nil [4144 4223])
            ("AT_LOCALE" variable nil nil [4225 4315])
            ("AT_UNICODE" variable nil nil [4317 4408])
            ("CH_LOCALE" variable nil nil [4410 4764])
            ("CH_UNICODE" variable nil nil [4766 5145])
            ("SRE_FLAG_TEMPLATE" variable nil nil [5155 5176])
            ("SRE_FLAG_IGNORECASE" variable nil nil [5216 5239])
            ("SRE_FLAG_LOCALE" variable nil nil [5259 5278])
            ("SRE_FLAG_MULTILINE" variable nil nil [5302 5324])
            ("SRE_FLAG_DOTALL" variable nil nil [5360 5380])
            ("SRE_FLAG_UNICODE" variable nil nil [5415 5436])
            ("SRE_FLAG_VERBOSE" variable nil nil [5458 5479])
            ("SRE_FLAG_DEBUG" variable nil nil [5513 5533])
            ("SRE_INFO_PREFIX" variable nil nil [5574 5593])
            ("SRE_INFO_LITERAL" variable nil nil [5607 5627])
            ("SRE_INFO_CHARSET" variable nil nil [5674 5694])
            ("if" code nil nil [5743 7198]))          
    :file "sre_constants.py"
    :pointmax 7198
    :fsize 7197
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "__future__.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Record of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"
                              CompilerFlag \")\"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.
\"\"\"" code nil nil [1 1645])
            ("all_feature_names" variable nil nil [1647 1816])
            ("__all__" code nil nil [1818 1869])
            ("CO_NESTED" variable nil nil [2093 2122])
            ("CO_GENERATOR_ALLOWED" variable nil nil [2141 2165])
            ("CO_FUTURE_DIVISION" variable nil nil [2209 2238])
            ("CO_FUTURE_ABSOLUTE_IMPORT" variable nil nil [2252 2286])
            ("CO_FUTURE_WITH_STATEMENT" variable nil nil [2325 2359])
            ("CO_FUTURE_PRINT_FUNCTION" variable nil nil [2379 2414])
            ("CO_FUTURE_UNICODE_LITERALS" variable nil nil [2434 2470])
            ("_Feature" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2596 2627])
                            ("self" variable nil (reparse-symbol indented_block_body) [2636 2669])
                            ("self" variable nil (reparse-symbol indented_block_body) [2678 2712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2531 2535])
                            ("optionalRelease" variable nil (reparse-symbol function_parameters) [2537 2552])
                            ("mandatoryRelease" variable nil (reparse-symbol function_parameters) [2554 2570])
                            ("compiler_flag" variable nil (reparse-symbol function_parameters) [2572 2585]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2518 2713])
                    ("getOptionalRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2741 2745]))                          
                        :documentation "Return first release in which this feature was recognized.

        This is a 5-tuple, of the same form as sys.version_info.
        ")
                        (reparse-symbol indented_block_body) [2718 2926])
                    ("getMandatoryRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2955 2959]))                          
                        :documentation "Return release in which this feature will become mandatory.

        This is a 5-tuple, of the same form as sys.version_info, or, if
        the feature was dropped, is None.
        ")
                        (reparse-symbol indented_block_body) [2931 3191])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3209 3213]))                          )
                        (reparse-symbol indented_block_body) [3196 3370]))                  
                :type "class")
                nil [2498 3370])
            ("nested_scopes" variable nil nil [3371 3502])
            ("generators" variable nil nil [3504 3637])
            ("division" variable nil nil [3639 3764])
            ("absolute_import" variable nil nil [3766 3919])
            ("with_statement" variable nil nil [3921 4070])
            ("print_function" variable nil nil [4072 4221])
            ("unicode_literals" variable nil nil [4223 4380]))          
    :file "__future__.py"
    :pointmax 4381
    :fsize 4380
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "hashlib.py"
    :major-mode 'python-mode
    :tags 
        '( ("__doc__" variable nil nil [122 2057])
            ("__always_supported" variable nil nil [2169 2245])
            ("algorithms" variable nil nil [2247 2278])
            ("__all__" code nil nil [2280 2332])
            ("__get_builtin_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [2365 2369]))              ) nil [2335 3201])
            ("__get_openssl_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [3233 3237]))              ) nil [3203 3610])
            ("__py_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3625 3629])
                    ("string" variable nil (reparse-symbol function_parameters) [3631 3637]))                  )
                nil [3612 3829])
            ("__hash_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3846 3850])
                    ("string" variable nil (reparse-symbol function_parameters) [3852 3858]))                  )
                nil [3831 4391])
            ("try" code nil nil [4393 4564])
            ("for" code nil nil [4565 4892])
            ("del" code nil nil [4912 4959])
            ("del" code nil nil [4960 5011]))          
    :file "hashlib.py"
    :pointmax 5012
    :fsize 5011
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "string.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"A collection of string operations (most are no longer used).

Warning: most of the code you see here isn't normally used nowadays.
Beginning with Python 1.6, many of these functions are implemented as
methods on the standard string object. They used to be implemented by
a built-in module called strop, but strop is now obsolete itself.

Public module variables:

whitespace -- a string containing all characters considered whitespace
lowercase -- a string containing all characters considered lowercase letters
uppercase -- a string containing all characters considered uppercase letters
letters -- a string containing all characters considered letters
digits -- a string containing all characters considered decimal digits
hexdigits -- a string containing all characters considered hexadecimal digits
octdigits -- a string containing all characters considered octal digits
punctuation -- a string containing all characters considered punctuation
printable -- a string containing all characters considered printable

\"\"\"" code nil nil [1 1025])
            ("whitespace" variable nil nil [1083 1109])
            ("lowercase" variable nil nil [1110 1150])
            ("uppercase" variable nil nil [1151 1191])
            ("letters" code nil nil [1192 1223])
            ("ascii_lowercase" variable nil nil [1224 1251])
            ("ascii_uppercase" variable nil nil [1252 1279])
            ("ascii_letters" code nil nil [1280 1329])
            ("digits" variable nil nil [1330 1351])
            ("hexdigits" code nil nil [1352 1392])
            ("octdigits" variable nil nil [1393 1415])
            ("punctuation" variable nil nil [1416 1468])
            ("printable" code nil nil [1469 1524])
            ("l" variable nil nil [1603 1628])
            ("_idmap" variable nil nil [1629 1653])
            ("del" code nil nil [1654 1659])
            ("capwords" function
               (:documentation "capwords(s [,sep]) -> string

    Split the argument into words using split, capitalize each
    word using capitalize, and join the capitalized words using
    join.  If the optional second argument sep is absent or None,
    runs of whitespace characters are replaced by a single space
    and leading and trailing whitespace are removed, otherwise
    sep is used to split and join the words.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1797 1798])
                    ("sep" variable nil (reparse-symbol function_parameters) [1800 1803]))                  )
                nil [1784 2290])
            ("_idmapL" variable nil nil [2325 2339])
            ("maketrans" function
               (:documentation "maketrans(frm, to) -> string

    Return a translation table (a string of 256 bytes long)
    suitable for use in string.translate.  The strings frm and to
    must be of the same length.

    "
                :arguments 
                  ( ("fromstr" variable nil (reparse-symbol function_parameters) [2354 2361])
                    ("tostr" variable nil (reparse-symbol function_parameters) [2363 2368]))                  )
                nil [2340 2890])
            ("re" include nil nil [2962 2978])
            ("_multimap" type
               (:documentation "Helper class for combining multiple mappings.

    Used by .{safe_,}substitute() to combine the mapping and keyword
    arguments.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3195 3218])
                            ("self" variable nil (reparse-symbol indented_block_body) [3227 3254]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3160 3164])
                            ("primary" variable nil (reparse-symbol function_parameters) [3166 3173])
                            ("secondary" variable nil (reparse-symbol function_parameters) [3175 3184]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3147 3255])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3276 3280])
                            ("key" variable nil (reparse-symbol function_parameters) [3282 3285]))                          )
                        (reparse-symbol indented_block_body) [3260 3404]))                  
                :type "class")
                nil [2980 3404])
            ("_TemplateMetaclass" type
               (:superclasses ("type")
                :members 
                  ( ("pattern" variable nil (reparse-symbol indented_block_body) [3442 3762])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3813 3870])
                            ("if" code nil (reparse-symbol indented_block_body) [3879 4113])
                            ("cls" variable nil (reparse-symbol indented_block_body) [4121 4185]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3781 3784])
                            ("name" variable nil (reparse-symbol function_parameters) [3786 3790])
                            ("bases" variable nil (reparse-symbol function_parameters) [3792 3797])
                            ("dct" variable nil (reparse-symbol function_parameters) [3799 3802]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3768 4186]))                  
                :type "class")
                nil [3406 4186])
            ("Template" type
               (:documentation "A string class for supporting $-substitutions."
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [4265 4299])
                    ("delimiter" variable nil (reparse-symbol indented_block_body) [4305 4320])
                    ("idpattern" variable nil (reparse-symbol indented_block_body) [4325 4356])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4400 4424]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4375 4379])
                            ("template" variable nil (reparse-symbol function_parameters) [4381 4389]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4362 4425])
                    ("_invalid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4510 4514])
                            ("mo" variable nil (reparse-symbol function_parameters) [4516 4518]))                          )
                        (reparse-symbol indented_block_body) [4497 4884])
                    ("substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4904 4908])
                            ("args" variable nil (reparse-symbol function_parameters) [4910 4915])
                            ("kws" variable nil (reparse-symbol function_parameters) [4917 4922]))                          )
                        (reparse-symbol indented_block_body) [4889 5933])
                    ("safe_substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5958 5962])
                            ("args" variable nil (reparse-symbol function_parameters) [5964 5969])
                            ("kws" variable nil (reparse-symbol function_parameters) [5971 5976]))                          )
                        (reparse-symbol indented_block_body) [5938 7244]))                  
                :type "class")
                nil [4188 7244])
            ("index_error" variable nil nil [7475 7499])
            ("atoi_error" variable nil nil [7500 7523])
            ("atof_error" variable nil nil [7524 7547])
            ("atol_error" variable nil nil [7548 7571])
            ("lower" function
               (:documentation "lower(s) -> string

    Return a copy of the string s converted to lowercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7626 7627]))                  )
                nil [7616 7745])
            ("upper" function
               (:documentation "upper(s) -> string

    Return a copy of the string s converted to uppercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7799 7800]))                  )
                nil [7789 7918])
            ("swapcase" function
               (:documentation "swapcase(s) -> string

    Return a copy of the string s with upper case characters
    converted to lowercase and vice versa.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7973 7974]))                  )
                nil [7960 8144])
            ("strip" function
               (:documentation "strip(s [,chars]) -> string

    Return a copy of the string s with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is unicode, S will be converted to unicode before stripping.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8200 8201])
                    ("chars" variable nil (reparse-symbol function_parameters) [8203 8208]))                  )
                nil [8190 8517])
            ("lstrip" function
               (:documentation "lstrip(s [,chars]) -> string

    Return a copy of the string s with leading whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8561 8562])
                    ("chars" variable nil (reparse-symbol function_parameters) [8564 8569]))                  )
                nil [8550 8789])
            ("rstrip" function
               (:documentation "rstrip(s [,chars]) -> string

    Return a copy of the string s with trailing whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8834 8835])
                    ("chars" variable nil (reparse-symbol function_parameters) [8837 8842]))                  )
                nil [8823 9063])
            ("split" function
               (:documentation "split(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string.  If maxsplit is given, splits at no more than
    maxsplit places (resulting in at most maxsplit+1 words).  If sep
    is not specified or is None, any whitespace string is a separator.

    (split and splitfields are synonymous)

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9133 9134])
                    ("sep" variable nil (reparse-symbol function_parameters) [9136 9139])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9146 9154]))                  )
                nil [9123 9575])
            ("splitfields" variable nil nil [9575 9594])
            ("rsplit" function
               (:documentation "rsplit(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string, starting at the end of the string and working
    to the front.  If maxsplit is given, at most maxsplit splits are
    done. If sep is not specified or is None, any whitespace string
    is a separator.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9665 9666])
                    ("sep" variable nil (reparse-symbol function_parameters) [9668 9671])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9678 9686]))                  )
                nil [9654 10081])
            ("join" function
               (:documentation "join(list [,sep]) -> string

    Return a string composed of the words in list, with
    intervening occurrences of sep.  The default separator is a
    single space.

    (joinfields and join are synonymous)

    "
                :arguments 
                  ( ("words" variable nil (reparse-symbol function_parameters) [10129 10134])
                    ("sep" variable nil (reparse-symbol function_parameters) [10136 10139]))                  )
                nil [10120 10400])
            ("joinfields" variable nil nil [10400 10417])
            ("index" function
               (:documentation "index(s, sub [,start [,end]]) -> int

    Like find but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10476 10477])
                    ("args" variable nil (reparse-symbol function_parameters) [10479 10484]))                  )
                nil [10466 10636])
            ("rindex" function
               (:documentation "rindex(s, sub [,start [,end]]) -> int

    Like rfind but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10700 10701])
                    ("args" variable nil (reparse-symbol function_parameters) [10703 10708]))                  )
                nil [10689 10863])
            ("count" function
               (:documentation "count(s, sub[, start[,end]]) -> int

    Return the number of occurrences of substring sub in string
    s[start:end].  Optional arguments start and end are
    interpreted as in slice notation.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10923 10924])
                    ("args" variable nil (reparse-symbol function_parameters) [10926 10931]))                  )
                nil [10913 11171])
            ("find" function
               (:documentation "find(s, sub [,start [,end]]) -> in

    Return the lowest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11222 11223])
                    ("args" variable nil (reparse-symbol function_parameters) [11225 11230]))                  )
                nil [11213 11528])
            ("rfind" function
               (:documentation "rfind(s, sub [,start [,end]]) -> int

    Return the highest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11585 11586])
                    ("args" variable nil (reparse-symbol function_parameters) [11588 11593]))                  )
                nil [11575 11895])
            ("_float" variable nil nil [11917 11931])
            ("_int" variable nil nil [11932 11942])
            ("_long" variable nil nil [11943 11955])
            ("atof" function
               (:documentation "atof(s) -> float

    Return the floating point number represented by the string s.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11992 11993]))                  )
                nil [11983 12117])
            ("atoi" function
               (:documentation "atoi(s [,base]) -> int

    Return the integer represented by the string s in the given
    base, which defaults to 10.  The string s must consist of one
    or more digits, possibly preceded by a sign.  If base is 0, it
    is chosen from the leading characters of s, 0 for octal, 0x or
    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is
    accepted.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12156 12157])
                    ("base" variable nil (reparse-symbol function_parameters) [12160 12164]))                  )
                nil [12147 12577])
            ("atol" function
               (:documentation "atol(s [,base]) -> long

    Return the long integer represented by the string s in the
    given base, which defaults to 10.  The string s must consist
    of one or more digits, possibly preceded by a sign.  If base
    is 0, it is chosen from the leading characters of s, 0 for
    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding
    0x or 0X is accepted.  A trailing L or l is not accepted,
    unless base is 0.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12621 12622])
                    ("base" variable nil (reparse-symbol function_parameters) [12624 12628]))                  )
                nil [12612 13106])
            ("ljust" function
               (:documentation "ljust(s, width[, fillchar]) -> string

    Return a left-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13142 13143])
                    ("width" variable nil (reparse-symbol function_parameters) [13145 13150])
                    ("args" variable nil (reparse-symbol function_parameters) [13152 13157]))                  )
                nil [13132 13449])
            ("rjust" function
               (:documentation "rjust(s, width[, fillchar]) -> string

    Return a right-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13485 13486])
                    ("width" variable nil (reparse-symbol function_parameters) [13488 13493])
                    ("args" variable nil (reparse-symbol function_parameters) [13495 13500]))                  )
                nil [13475 13793])
            ("center" function
               (:documentation "center(s, width[, fillchar]) -> string

    Return a center version of s, in a field of the specified
    width. padded with spaces as needed.  The string is never
    truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13823 13824])
                    ("width" variable nil (reparse-symbol function_parameters) [13826 13831])
                    ("args" variable nil (reparse-symbol function_parameters) [13833 13838]))                  )
                nil [13812 14124])
            ("zfill" function
               (:documentation "zfill(x, width) -> string

    Pad a numeric string x with zeros on the left, to fill a field
    of the specified width.  The string x is never truncated.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [14336 14337])
                    ("width" variable nil (reparse-symbol function_parameters) [14339 14344]))                  )
                nil [14326 14603])
            ("expandtabs" function
               (:documentation "expandtabs(s [,tabsize]) -> string

    Return a copy of the string s with all tab characters replaced
    by the appropriate number of spaces, depending on the current
    column, and the tabsize (default 8).

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [14718 14719])
                    ("tabsize" variable nil (reparse-symbol function_parameters) [14721 14728]))                  )
                nil [14703 14992])
            ("translate" function
               (:documentation "translate(s,table [,deletions]) -> string

    Return a copy of the string s, where all characters occurring
    in the optional argument deletions are removed, and the
    remaining characters have been mapped through the given
    translation table, which must be a string of length 256.  The
    deletions argument is not allowed for Unicode strings.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15054 15055])
                    ("table" variable nil (reparse-symbol function_parameters) [15057 15062])
                    ("deletions" variable nil (reparse-symbol function_parameters) [15064 15073]))                  )
                nil [15040 15803])
            ("capitalize" function
               (:documentation "capitalize(s) -> string

    Return a copy of the string s with only its first character
    capitalized.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15873 15874]))                  )
                nil [15858 16025])
            ("replace" function
               (:documentation "replace (str, old, new[, maxreplace]) -> string

    Return a copy of string str with all occurrences of substring
    old replaced by new. If the optional argument maxreplace is
    given, only the first maxreplace occurrences are replaced.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [16071 16072])
                    ("old" variable nil (reparse-symbol function_parameters) [16074 16077])
                    ("new" variable nil (reparse-symbol function_parameters) [16079 16082])
                    ("maxreplace" variable nil (reparse-symbol function_parameters) [16084 16094]))                  )
                nil [16059 16401])
            ("try" code nil nil [16643 16848])
            ("Formatter" type
               (:superclasses ("object")
                :members 
                  ( ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17294 17298])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17300 17313])
                            ("args" variable nil (reparse-symbol function_parameters) [17315 17320])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17322 17330]))                          )
                        (reparse-symbol indented_block_body) [17283 17390])
                    ("vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17407 17411])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17413 17426])
                            ("args" variable nil (reparse-symbol function_parameters) [17428 17432])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17434 17440]))                          )
                        (reparse-symbol indented_block_body) [17395 17621])
                    ("_vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17639 17643])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17645 17658])
                            ("args" variable nil (reparse-symbol function_parameters) [17660 17664])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17666 17672])
                            ("used_args" variable nil (reparse-symbol function_parameters) [17674 17683])
                            ("recursion_depth" variable nil (reparse-symbol function_parameters) [17685 17700]))                          )
                        (reparse-symbol indented_block_body) [17626 18930])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18950 18954])
                            ("key" variable nil (reparse-symbol function_parameters) [18956 18959])
                            ("args" variable nil (reparse-symbol function_parameters) [18961 18965])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18967 18973]))                          )
                        (reparse-symbol indented_block_body) [18936 19091])
                    ("check_unused_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19119 19123])
                            ("used_args" variable nil (reparse-symbol function_parameters) [19125 19134])
                            ("args" variable nil (reparse-symbol function_parameters) [19136 19140])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19142 19148]))                          )
                        (reparse-symbol indented_block_body) [19097 19164])
                    ("format_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19187 19191])
                            ("value" variable nil (reparse-symbol function_parameters) [19193 19198])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [19200 19211]))                          )
                        (reparse-symbol indented_block_body) [19170 19256])
                    ("convert_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19280 19284])
                            ("value" variable nil (reparse-symbol function_parameters) [19286 19291])
                            ("conversion" variable nil (reparse-symbol function_parameters) [19293 19303]))                          )
                        (reparse-symbol indented_block_body) [19262 19621])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19996 20000])
                            ("format_string" variable nil (reparse-symbol function_parameters) [20002 20015]))                          )
                        (reparse-symbol indented_block_body) [19986 20067])
                    ("get_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20344 20348])
                            ("field_name" variable nil (reparse-symbol function_parameters) [20350 20360])
                            ("args" variable nil (reparse-symbol function_parameters) [20362 20366])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20368 20374]))                          )
                        (reparse-symbol indented_block_body) [20330 20757]))                  
                :type "class")
                nil [17254 20757]))          
    :file "string.py"
    :pointmax 20757
    :fsize 20756
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "urlparse.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Parse (absolute and relative) URLs.

urlparse module is based upon the following RFC specifications.

RFC 3986 (STD66): \"Uniform Resource Identifiers\" by T. Berners-Lee, R. Fielding
and L.  Masinter, January 2005.

RFC 2732 : \"Format for Literal IPv6 Addresses in URL's by R.Hinden, B.Carpenter
and L.Masinter, December 1999.

RFC 2396:  \"Uniform Resource Identifiers (URI)\": Generic Syntax by T.
Berners-Lee, R. Fielding, and L. Masinter, August 1998.

RFC 2368: \"The mailto URL scheme\", by P.Hoffman , L Masinter, J. Zwinski, July 1998.

RFC 1808: \"Relative Uniform Resource Locators\", by R. Fielding, UC Irvine, June
1995.

RFC 1738: \"Uniform Resource Locators (URL)\" by T. Berners-Lee, L. Masinter, M.
McCahill, December 1994

RFC 3986 is considered the current standard and any future changes to
urlparse module should conform with it.  The urlparse module is
currently not entirely compliant with this RFC due to defacto
scenarios for parsing, and for backward compatibility purposes, some
parsing quirks from older RFCs are retained. The testcases in
test_urlparse.py provides a good indicator of parsing behavior.

\"\"\"" code nil nil [1 1130])
            ("re" include nil nil [1132 1141])
            ("__all__" variable nil nil [1143 1265])
            ("uses_relative" variable nil nil [1325 1533])
            ("uses_netloc" variable nil nil [1534 1785])
            ("uses_params" variable nil nil [1786 1948])
            ("non_hierarchical" variable nil nil [2094 2218])
            ("uses_query" variable nil nil [2219 2341])
            ("uses_fragment" variable nil nil [2342 2499])
            ("scheme_chars" variable nil nil [2536 2677])
            ("MAX_CACHE_SIZE" variable nil nil [2679 2698])
            ("_parse_cache" variable nil nil [2699 2716])
            ("clear_cache" function (:documentation "Clear the parse cache.") nil [2718 2795])
            ("ResultMixin" type
               (:documentation "Shared methods for the parsed result objects."
                :superclasses ("object")
                :members 
                  ( ("username" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2912 2916]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2885 3155])
                    ("password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3187 3191]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3160 3398])
                    ("hostname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3430 3434]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3403 3752])
                    ("port" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3780 3784]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3757 4099]))                  
                :type "class")
                nil [2797 4099])
            ("collections" include nil nil [4100 4134])
            ("SplitResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4237 4251])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4268 4272]))                          )
                        (reparse-symbol indented_block_body) [4257 4307]))                  
                :type "class")
                nil [4136 4307])
            ("ParseResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4417 4431])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4448 4452]))                          )
                        (reparse-symbol indented_block_body) [4437 4487]))                  
                :type "class")
                nil [4309 4487])
            ("urlparse" function
               (:documentation "Parse a URL into 6 components:
    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>
    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [4502 4505])
                    ("scheme" variable nil (reparse-symbol function_parameters) [4507 4513])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [4518 4533]))                  )
                nil [4489 5127])
            ("_splitparams" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [5145 5148]))              ) nil [5128 5324])
            ("_splitnetloc" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [5342 5345])
                ("start" variable nil (reparse-symbol function_parameters) [5347 5352]))              ) nil [5325 5773])
            ("urlsplit" function
               (:documentation "Parse a URL into 5 components:
    <scheme>://<netloc>/<path>?<query>#<fragment>
    Return a 5-tuple: (scheme, netloc, path, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [5787 5790])
                    ("scheme" variable nil (reparse-symbol function_parameters) [5792 5798])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [5803 5818]))                  )
                nil [5774 8010])
            ("urlunparse" function
               (:documentation "Put a parsed URL back together again.  This may result in a
    slightly different, but equivalent URL, if the URL that was parsed
    originally had redundant delimiters, e.g. a ? with an empty query
    (the draft states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [8026 8030]))                  )
                nil [8011 8465])
            ("urlunsplit" function
               (:documentation "Combine the elements of a tuple as returned by urlsplit() into a
    complete URL as a string. The data argument can be any five-item iterable.
    This may result in a slightly different, but equivalent URL, if the URL that
    was parsed originally had unnecessary delimiters (for example, a ? with an
    empty query; the RFC states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [8481 8485]))                  )
                nil [8466 9237])
            ("urljoin" function
               (:documentation "Join a base URL and a possibly relative URL to form an absolute
    interpretation of the latter."
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [9250 9254])
                    ("url" variable nil (reparse-symbol function_parameters) [9256 9259])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [9261 9276]))                  )
                nil [9238 11040])
            ("urldefrag" function
               (:documentation "Removes any existing fragment from URL.

    Returns a tuple of the defragmented URL and the fragment.  If
    the URL contained no fragments, the second element is the
    empty string.
    "
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [11055 11058]))                  )
                nil [11041 11436])
            ("try" code nil nil [11437 11581])
            ("_hexdig" variable nil nil [11861 11895])
            ("_hextochr" variable nil nil [11896 11988])
            ("_asciire" variable nil nil [11989 12028])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12042 12043]))                  )
                nil [12030 12735])
            ("parse_qs" function
               (:documentation "Parse a query given as a string argument.

        Arguments:

        qs: percent-encoded query string to be parsed

        keep_blank_values: flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A true value indicates that blanks should be retained as
            blank strings.  The default false value indicates that
            blank values are to be ignored and treated as if they were
            not included.

        strict_parsing: flag indicating what to do with parsing errors.
            If false (the default), errors are silently ignored.
            If true, errors raise a ValueError exception.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [12749 12751])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [12753 12770])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [12774 12788]))                  )
                nil [12736 13706])
            ("parse_qsl" function
               (:documentation "Parse a query given as a string argument.

    Arguments:

    qs: percent-encoded query string to be parsed

    keep_blank_values: flag indicating whether blank values in
        percent-encoded queries should be treated as blank strings.  A
        true value indicates that blanks should be retained as blank
        strings.  The default false value indicates that blank values
        are to be ignored and treated as if they were  not included.

    strict_parsing: flag indicating what to do with parsing errors. If
        false (the default), errors are silently ignored. If true,
        errors raise a ValueError exception.

    Returns a list, as G-d intended.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [13721 13723])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [13725 13742])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [13746 13760]))                  )
                nil [13707 15165]))          
    :file "urlparse.py"
    :pointmax 15165
    :fsize 15164
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax '((COMMA 4396 . 4397) (NAME 4327 . 4337) (PAREN_BLOCK 4337 . 4396) (COMMA 4216 . 4217) (NAME 4154 . 4164) (PAREN_BLOCK 4164 . 4216))
    )
   (semanticdb-table "calendar.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"Calendar printing functions

Note when comparing these calendars to the ones printed by cal(1): By
default, these calendars have Monday as the first day of the week, and
Sunday as the last (the European convention). Use setfirstweekday() to
set the first day of the week (0=Monday, 6=Sunday).\"\"\"" code nil nil [1 299])
            ("sys" include nil nil [301 311])
            ("datetime" include nil nil [312 327])
            ("locale" include nil nil [328 352])
            ("__all__" variable nil nil [354 643])
            ("error" variable nil nil [714 732])
            ("IllegalMonthError" type
               (:superclasses ("ValueError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [844 862]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [822 826])
                            ("month" variable nil (reparse-symbol function_parameters) [828 833]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [809 863])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [879 883]))                          )
                        (reparse-symbol indented_block_body) [867 950]))                  
                :type "class")
                nil [768 950])
            ("IllegalWeekdayError" type
               (:superclasses ("ValueError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1032 1054]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1008 1012])
                            ("weekday" variable nil (reparse-symbol function_parameters) [1014 1021]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [995 1055])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1071 1075]))                          )
                        (reparse-symbol indented_block_body) [1059 1166]))                  
                :type "class")
                nil [952 1166])
            ("January" variable nil nil [1208 1219])
            ("February" variable nil nil [1220 1232])
            ("mdays" variable nil nil [1297 1356])
            ("_localized_month" type
               (:members 
                  ( ("_months" variable nil (reparse-symbol indented_block_body) [1672 1739])
                    ("_months" code nil (reparse-symbol indented_block_body) [1744 1775])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1817 1837]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1794 1798])
                            ("format" variable nil (reparse-symbol function_parameters) [1800 1806]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1781 1838])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1859 1863])
                            ("i" variable nil (reparse-symbol function_parameters) [1865 1866]))                          )
                        (reparse-symbol indented_block_body) [1843 2037])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2054 2058]))                          )
                        (reparse-symbol indented_block_body) [2042 2079]))                  
                :type "class")
                nil [1643 2079])
            ("_localized_day" type
               (:members 
                  ( ("_days" variable nil (reparse-symbol indented_block_body) [2145 2209])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2251 2271]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2228 2232])
                            ("format" variable nil (reparse-symbol function_parameters) [2234 2240]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2215 2272])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2293 2297])
                            ("i" variable nil (reparse-symbol function_parameters) [2299 2300]))                          )
                        (reparse-symbol indented_block_body) [2277 2469])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2486 2490]))                          )
                        (reparse-symbol indented_block_body) [2474 2510]))                  
                :type "class")
                nil [2081 2510])
            ("day_name" variable nil nil [2553 2584])
            ("day_abbr" variable nil nil [2585 2616])
            ("month_name" variable nil nil [2677 2712])
            ("month_abbr" variable nil nil [2713 2748])
            ("" code nil nil [2775 2850])
            ("isleap" function
               (:documentation "Return True for leap years, False for non-leap years."
                :arguments 
                  ( ("year" variable nil (reparse-symbol function_parameters) [2864 2868]))                  )
                nil [2853 3001])
            ("leapdays" function
               (:documentation "Return number of leap years in range [y1, y2).
       Assume y1 <= y2."
                :arguments 
                  ( ("y1" variable nil (reparse-symbol function_parameters) [3016 3018])
                    ("y2" variable nil (reparse-symbol function_parameters) [3020 3022]))                  )
                nil [3003 3201])
            ("weekday" function
               (:documentation "Return weekday (0-6 ~ Mon-Sun) for year (1970-...), month (1-12),
       day (1-31)."
                :arguments 
                  ( ("year" variable nil (reparse-symbol function_parameters) [3215 3219])
                    ("month" variable nil (reparse-symbol function_parameters) [3221 3226])
                    ("day" variable nil (reparse-symbol function_parameters) [3228 3231]))                  )
                nil [3203 3382])
            ("monthrange" function
               (:documentation "Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for
       year, month."
                :arguments 
                  ( ("year" variable nil (reparse-symbol function_parameters) [3399 3403])
                    ("month" variable nil (reparse-symbol function_parameters) [3405 3410]))                  )
                nil [3384 3695])
            ("Calendar" type
               (:documentation "
    Base calendar class. This class doesn't do any formatting. It simply
    provides data to subclasses.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3892 3924]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3861 3865])
                            ("firstweekday" variable nil (reparse-symbol function_parameters) [3867 3879]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3848 3950])
                    ("getfirstweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3975 3979]))                          )
                        (reparse-symbol indented_block_body) [3955 4020])
                    ("setfirstweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4045 4049])
                            ("firstweekday" variable nil (reparse-symbol function_parameters) [4051 4063]))                          )
                        (reparse-symbol indented_block_body) [4025 4108])
                    ("firstweekday" variable nil (reparse-symbol indented_block_body) [4113 4170])
                    ("iterweekdays" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4193 4197]))                          
                        :documentation "
        Return a iterator for one week of weekday numbers starting with the
        configured first one.
        ")
                        (reparse-symbol indented_block_body) [4176 4418])
                    ("itermonthdates" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4442 4446])
                            ("year" variable nil (reparse-symbol function_parameters) [4448 4452])
                            ("month" variable nil (reparse-symbol function_parameters) [4454 4459]))                          
                        :documentation "
        Return an iterator for one month. The iterator will yield datetime.date
        values and will always iterate through complete weeks, so it will yield
        dates outside the specified month.
        ")
                        (reparse-symbol indented_block_body) [4423 5239])
                    ("itermonthdays2" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5263 5267])
                            ("year" variable nil (reparse-symbol function_parameters) [5269 5273])
                            ("month" variable nil (reparse-symbol function_parameters) [5275 5280]))                          
                        :documentation "
        Like itermonthdates(), but will yield (day number, weekday number)
        tuples. For days outside the specified month the day number is 0.
        ")
                        (reparse-symbol indented_block_body) [5244 5655])
                    ("itermonthdays" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5678 5682])
                            ("year" variable nil (reparse-symbol function_parameters) [5684 5688])
                            ("month" variable nil (reparse-symbol function_parameters) [5690 5695]))                          
                        :documentation "
        Like itermonthdates(), but will yield day numbers. For days outside
        the specified month the day number is 0.
        ")
                        (reparse-symbol indented_block_body) [5660 6010])
                    ("monthdatescalendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6038 6042])
                            ("year" variable nil (reparse-symbol function_parameters) [6044 6048])
                            ("month" variable nil (reparse-symbol function_parameters) [6050 6055]))                          
                        :documentation "
        Return a matrix (list of lists) representing a month's calendar.
        Each row represents a week; week entries are datetime.date values.
        ")
                        (reparse-symbol indented_block_body) [6015 6350])
                    ("monthdays2calendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6378 6382])
                            ("year" variable nil (reparse-symbol function_parameters) [6384 6388])
                            ("month" variable nil (reparse-symbol function_parameters) [6390 6395]))                          
                        :documentation "
        Return a matrix representing a month's calendar.
        Each row represents a week; week entries are
        (day number, weekday number) tuples. Day numbers outside this month
        are zero.
        ")
                        (reparse-symbol indented_block_body) [6355 6743])
                    ("monthdayscalendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6770 6774])
                            ("year" variable nil (reparse-symbol function_parameters) [6776 6780])
                            ("month" variable nil (reparse-symbol function_parameters) [6782 6787]))                          
                        :documentation "
        Return a matrix representing a month's calendar.
        Each row represents a week; days outside this month are zero.
        ")
                        (reparse-symbol indented_block_body) [6748 7057])
                    ("yeardatescalendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7084 7088])
                            ("year" variable nil (reparse-symbol function_parameters) [7090 7094])
                            ("width" variable nil (reparse-symbol function_parameters) [7096 7101]))                          
                        :documentation "
        Return the data for the specified year ready for formatting. The return
        value is a list of month rows. Each month row contains up to width months.
        Each month contains between 4 and 6 weeks and each week contains 1-7
        days. Days are datetime.date objects.
        ")
                        (reparse-symbol indented_block_body) [7062 7612])
                    ("yeardays2calendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7639 7643])
                            ("year" variable nil (reparse-symbol function_parameters) [7645 7649])
                            ("width" variable nil (reparse-symbol function_parameters) [7651 7656]))                          
                        :documentation "
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are
        (day number, weekday number) tuples. Day numbers outside this month are
        zero.
        ")
                        (reparse-symbol indented_block_body) [7617 8115])
                    ("yeardayscalendar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8141 8145])
                            ("year" variable nil (reparse-symbol function_parameters) [8147 8151])
                            ("width" variable nil (reparse-symbol function_parameters) [8153 8158]))                          
                        :documentation "
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are day numbers.
        Day numbers outside this month are zero.
        ")
                        (reparse-symbol indented_block_body) [8120 8584]))                  
                :type "class")
                nil [3697 8584])
            ("TextCalendar" type
               (:documentation "
    Subclass of Calendar that outputs a calendar as a simple plain text
    similar to the UNIX program cal.
    "
                :superclasses ("Calendar")
                :members 
                  ( ("prweek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8757 8761])
                            ("theweek" variable nil (reparse-symbol function_parameters) [8763 8770])
                            ("width" variable nil (reparse-symbol function_parameters) [8772 8777]))                          
                        :documentation "
        Print a single week (no newline).
        ")
                        (reparse-symbol indented_block_body) [8746 8893])
                    ("formatday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8912 8916])
                            ("day" variable nil (reparse-symbol function_parameters) [8918 8921])
                            ("weekday" variable nil (reparse-symbol function_parameters) [8923 8930])
                            ("width" variable nil (reparse-symbol function_parameters) [8932 8937]))                          
                        :documentation "
        Returns a formatted day.
        ")
                        (reparse-symbol indented_block_body) [8898 9154])
                    ("formatweek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9174 9178])
                            ("theweek" variable nil (reparse-symbol function_parameters) [9180 9187])
                            ("width" variable nil (reparse-symbol function_parameters) [9189 9194]))                          
                        :documentation "
        Returns a single week in a string (no newline).
        ")
                        (reparse-symbol indented_block_body) [9159 9354])
                    ("formatweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9377 9381])
                            ("day" variable nil (reparse-symbol function_parameters) [9383 9386])
                            ("width" variable nil (reparse-symbol function_parameters) [9388 9393]))                          
                        :documentation "
        Returns a formatted week day name.
        ")
                        (reparse-symbol indented_block_body) [9359 9606])
                    ("formatweekheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9632 9636])
                            ("width" variable nil (reparse-symbol function_parameters) [9638 9643]))                          
                        :documentation "
        Return a header for a week.
        ")
                        (reparse-symbol indented_block_body) [9611 9789])
                    ("formatmonthname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9814 9818])
                            ("theyear" variable nil (reparse-symbol function_parameters) [9820 9827])
                            ("themonth" variable nil (reparse-symbol function_parameters) [9829 9837])
                            ("width" variable nil (reparse-symbol function_parameters) [9839 9844])
                            ("withyear" variable nil (reparse-symbol function_parameters) [9846 9854]))                          
                        :documentation "
        Return a formatted month name.
        ")
                        (reparse-symbol indented_block_body) [9794 10049])
                    ("prmonth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10066 10070])
                            ("theyear" variable nil (reparse-symbol function_parameters) [10072 10079])
                            ("themonth" variable nil (reparse-symbol function_parameters) [10081 10089])
                            ("w" variable nil (reparse-symbol function_parameters) [10091 10092])
                            ("l" variable nil (reparse-symbol function_parameters) [10096 10097]))                          
                        :documentation "
        Print a month's calendar.
        ")
                        (reparse-symbol indented_block_body) [10054 10217])
                    ("formatmonth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10238 10242])
                            ("theyear" variable nil (reparse-symbol function_parameters) [10244 10251])
                            ("themonth" variable nil (reparse-symbol function_parameters) [10253 10261])
                            ("w" variable nil (reparse-symbol function_parameters) [10263 10264])
                            ("l" variable nil (reparse-symbol function_parameters) [10268 10269]))                          
                        :documentation "
        Return a month's calendar string (multi-line).
        ")
                        (reparse-symbol indented_block_body) [10222 10738])
                    ("formatyear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10758 10762])
                            ("theyear" variable nil (reparse-symbol function_parameters) [10764 10771])
                            ("w" variable nil (reparse-symbol function_parameters) [10773 10774])
                            ("l" variable nil (reparse-symbol function_parameters) [10778 10779])
                            ("c" variable nil (reparse-symbol function_parameters) [10783 10784])
                            ("m" variable nil (reparse-symbol function_parameters) [10788 10789]))                          
                        :documentation "
        Returns a year's calendar as a multi-line string.
        ")
                        (reparse-symbol indented_block_body) [10743 12107])
                    ("pryear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12123 12127])
                            ("theyear" variable nil (reparse-symbol function_parameters) [12129 12136])
                            ("w" variable nil (reparse-symbol function_parameters) [12138 12139])
                            ("l" variable nil (reparse-symbol function_parameters) [12143 12144])
                            ("c" variable nil (reparse-symbol function_parameters) [12148 12149])
                            ("m" variable nil (reparse-symbol function_parameters) [12153 12154]))                          
                        :documentation "Print a year's calendar.")
                        (reparse-symbol indented_block_body) [12112 12249]))                  
                :type "class")
                nil [8586 12249])
            ("HTMLCalendar" type
               (:documentation "
    This calendar returns complete HTML pages.
    "
                :superclasses ("Calendar")
                :members 
                  ( ("cssclasses" variable nil (reparse-symbol indented_block_body) [12385 12447])
                    ("formatday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12467 12471])
                            ("day" variable nil (reparse-symbol function_parameters) [12473 12476])
                            ("weekday" variable nil (reparse-symbol function_parameters) [12478 12485]))                          
                        :documentation "
        Return a day as a table cell.
        ")
                        (reparse-symbol indented_block_body) [12453 12734])
                    ("formatweek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12754 12758])
                            ("theweek" variable nil (reparse-symbol function_parameters) [12760 12767]))                          
                        :documentation "
        Return a complete week as a table row.
        ")
                        (reparse-symbol indented_block_body) [12739 12940])
                    ("formatweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12963 12967])
                            ("day" variable nil (reparse-symbol function_parameters) [12969 12972]))                          
                        :documentation "
        Return a weekday name as a table header.
        ")
                        (reparse-symbol indented_block_body) [12945 13128])
                    ("formatweekheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13154 13158]))                          
                        :documentation "
        Return a header for a week as a table row.
        ")
                        (reparse-symbol indented_block_body) [13133 13341])
                    ("formatmonthname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13366 13370])
                            ("theyear" variable nil (reparse-symbol function_parameters) [13372 13379])
                            ("themonth" variable nil (reparse-symbol function_parameters) [13381 13389])
                            ("withyear" variable nil (reparse-symbol function_parameters) [13391 13399]))                          
                        :documentation "
        Return a month name as a table row.
        ")
                        (reparse-symbol indented_block_body) [13346 13680])
                    ("formatmonth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13701 13705])
                            ("theyear" variable nil (reparse-symbol function_parameters) [13707 13714])
                            ("themonth" variable nil (reparse-symbol function_parameters) [13716 13724])
                            ("withyear" variable nil (reparse-symbol function_parameters) [13726 13734]))                          
                        :documentation "
        Return a formatted month as a table.
        ")
                        (reparse-symbol indented_block_body) [13685 14263])
                    ("formatyear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14283 14287])
                            ("theyear" variable nil (reparse-symbol function_parameters) [14289 14296])
                            ("width" variable nil (reparse-symbol function_parameters) [14298 14303]))                          
                        :documentation "
        Return a formatted year as a table of tables.
        ")
                        (reparse-symbol indented_block_body) [14268 14996])
                    ("formatyearpage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15020 15024])
                            ("theyear" variable nil (reparse-symbol function_parameters) [15026 15033])
                            ("width" variable nil (reparse-symbol function_parameters) [15035 15040])
                            ("css" variable nil (reparse-symbol function_parameters) [15044 15047])
                            ("encoding" variable nil (reparse-symbol function_parameters) [15064 15072]))                          
                        :documentation "
        Return a formatted year as a complete HTML page.
        ")
                        (reparse-symbol indented_block_body) [15001 15957]))                  
                :type "class")
                nil [12251 15957])
            ("TimeEncoding" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [16019 16039]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15996 16000])
                            ("locale" variable nil (reparse-symbol function_parameters) [16002 16008]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15983 16040])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16059 16063]))                          )
                        (reparse-symbol indented_block_body) [16045 16235])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16253 16257])
                            ("args" variable nil (reparse-symbol function_parameters) [16259 16264]))                          )
                        (reparse-symbol indented_block_body) [16240 16326]))                  
                :type "class")
                nil [15959 16326])
            ("LocaleTextCalendar" type
               (:documentation "
    This class can be passed a locale name in the constructor and will return
    month and weekday names in the specified locale. If this locale includes
    an encoding all strings containing month and weekday names will be returned
    as unicode.
    "
                :superclasses ("TextCalendar")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("TextCalendar" code nil (reparse-symbol indented_block_body) [16697 16738])
                            ("if" code nil (reparse-symbol indented_block_body) [16747 16814])
                            ("self" variable nil (reparse-symbol indented_block_body) [16822 16842]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16653 16657])
                            ("firstweekday" variable nil (reparse-symbol function_parameters) [16659 16671])
                            ("locale" variable nil (reparse-symbol function_parameters) [16675 16681]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16640 16843])
                    ("formatweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16866 16870])
                            ("day" variable nil (reparse-symbol function_parameters) [16872 16875])
                            ("width" variable nil (reparse-symbol function_parameters) [16877 16882]))                          )
                        (reparse-symbol indented_block_body) [16848 17206])
                    ("formatmonthname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17231 17235])
                            ("theyear" variable nil (reparse-symbol function_parameters) [17237 17244])
                            ("themonth" variable nil (reparse-symbol function_parameters) [17246 17254])
                            ("width" variable nil (reparse-symbol function_parameters) [17256 17261])
                            ("withyear" variable nil (reparse-symbol function_parameters) [17263 17271]))                          )
                        (reparse-symbol indented_block_body) [17211 17547]))                  
                :type "class")
                nil [16328 17547])
            ("LocaleHTMLCalendar" type
               (:documentation "
    This class can be passed a locale name in the constructor and will return
    month and weekday names in the specified locale. If this locale includes
    an encoding all strings containing month and weekday names will be returned
    as unicode.
    "
                :superclasses ("HTMLCalendar")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("HTMLCalendar" code nil (reparse-symbol indented_block_body) [17917 17958])
                            ("if" code nil (reparse-symbol indented_block_body) [17967 18034])
                            ("self" variable nil (reparse-symbol indented_block_body) [18042 18062]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17873 17877])
                            ("firstweekday" variable nil (reparse-symbol function_parameters) [17879 17891])
                            ("locale" variable nil (reparse-symbol function_parameters) [17895 17901]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17860 18063])
                    ("formatweekday" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18086 18090])
                            ("day" variable nil (reparse-symbol function_parameters) [18092 18095]))                          )
                        (reparse-symbol indented_block_body) [18068 18328])
                    ("formatmonthname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18353 18357])
                            ("theyear" variable nil (reparse-symbol function_parameters) [18359 18366])
                            ("themonth" variable nil (reparse-symbol function_parameters) [18368 18376])
                            ("withyear" variable nil (reparse-symbol function_parameters) [18378 18386]))                          )
                        (reparse-symbol indented_block_body) [18333 18699]))                  
                :type "class")
                nil [17549 18699])
            ("c" variable nil nil [18742 18760])
            ("firstweekday" variable nil nil [18762 18794])
            ("setfirstweekday" function (:arguments 
              ( ("firstweekday" variable nil (reparse-symbol function_parameters) [18816 18828]))              ) nil [18796 19073])
            ("monthcalendar" variable nil nil [19074 19109])
            ("prweek" variable nil nil [19110 19127])
            ("week" variable nil nil [19128 19147])
            ("weekheader" variable nil nil [19148 19179])
            ("prmonth" variable nil nil [19180 19199])
            ("month" variable nil nil [19200 19221])
            ("calendar" variable nil nil [19222 19245])
            ("prcal" variable nil nil [19246 19262])
            ("_colwidth" code nil nil [19323 19342])
            ("_spacing" variable nil nil [19380 19392])
            ("format" function
               (:documentation "Prints multi-column formatting for year calendars"
                :arguments 
                  ( ("cols" variable nil (reparse-symbol function_parameters) [19456 19460])
                    ("colwidth" variable nil (reparse-symbol function_parameters) [19462 19470])
                    ("spacing" variable nil (reparse-symbol function_parameters) [19482 19489]))                  )
                nil [19445 19609])
            ("formatstring" function
               (:documentation "Returns a string formatted from n strings, centered within n columns."
                :arguments 
                  ( ("cols" variable nil (reparse-symbol function_parameters) [19628 19632])
                    ("colwidth" variable nil (reparse-symbol function_parameters) [19634 19642])
                    ("spacing" variable nil (reparse-symbol function_parameters) [19654 19661]))                  )
                nil [19611 19830])
            ("EPOCH" variable nil nil [19832 19844])
            ("_EPOCH_ORD" variable nil nil [19845 19896])
            ("timegm" function
               (:documentation "Unrelated but handy function to calculate Unix timestamp from GMT."
                :arguments 
                  ( ("tuple" variable nil (reparse-symbol function_parameters) [19910 19915]))                  )
                nil [19899 20238])
            ("main" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [20249 20253]))              ) nil [20240 23258])
            ("if" code nil nil [23260 23306]))          
    :file "calendar.py"
    :pointmax 23306
    :fsize 23305
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "collections.py"
    :major-mode 'python-mode
    :tags 
        '( ("__all__" variable nil nil [1 75])
            ("_abcoll" include nil nil [224 245])
            ("_abcoll" include nil nil [246 260])
            ("__all__" variable nil nil [261 287])
            ("_collections" include nil nil [289 332])
            ("operator" include nil nil [333 390])
            ("keyword" include nil nil [391 434])
            ("sys" include nil nil [435 453])
            ("heapq" include nil nil [454 476])
            ("itertools" include nil nil [477 554])
            ("itertools" include nil nil [555 590])
            ("try" code nil nil [592 717])
            ("OrderedDict" type
               (:superclasses ("dict")
                :members 
                  ( ("'Dictionary that remembers insertion order'" code nil (reparse-symbol indented_block_body) [927 970])
                    ("__init__" function
                       (:suite 
                          ( ("'''Initialize an ordered dictionary.  The signature is the same as
        regular dictionaries, but keyword arguments are not recommended because
        their insertion order is arbitrary.

        '''" code nil (reparse-symbol indented_block_body) [1579 1782])
                            ("if" code nil (reparse-symbol indented_block_body) [1791 1889])
                            ("try" code nil (reparse-symbol indented_block_body) [1897 2098])
                            ("self" code nil (reparse-symbol indented_block_body) [2106 2134]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1549 1553])
                            ("args" variable nil (reparse-symbol function_parameters) [1555 1560])
                            ("kwds" variable nil (reparse-symbol function_parameters) [1562 1568]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1536 2135])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2156 2160])
                            ("key" variable nil (reparse-symbol function_parameters) [2162 2165])
                            ("value" variable nil (reparse-symbol function_parameters) [2167 2172])
                            ("dict_setitem" variable nil (reparse-symbol function_parameters) [2174 2186]))                          )
                        (reparse-symbol indented_block_body) [2140 2608])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2629 2633])
                            ("key" variable nil (reparse-symbol function_parameters) [2635 2638])
                            ("dict_delitem" variable nil (reparse-symbol function_parameters) [2640 2652]))                          )
                        (reparse-symbol indented_block_body) [2613 3123])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3141 3145]))                          )
                        (reparse-symbol indented_block_body) [3128 3526])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3548 3552]))                          )
                        (reparse-symbol indented_block_body) [3531 3952])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3967 3971]))                          )
                        (reparse-symbol indented_block_body) [3957 4147])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4236 4240]))                          )
                        (reparse-symbol indented_block_body) [4227 4311])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4327 4331]))                          )
                        (reparse-symbol indented_block_body) [4316 4423])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4438 4442]))                          )
                        (reparse-symbol indented_block_body) [4428 4552])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4570 4574]))                          )
                        (reparse-symbol indented_block_body) [4557 4662])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4682 4686]))                          )
                        (reparse-symbol indented_block_body) [4667 4799])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4818 4822]))                          )
                        (reparse-symbol indented_block_body) [4804 4951])
                    ("update" variable nil (reparse-symbol indented_block_body) [4956 4986])
                    ("__update" variable nil (reparse-symbol indented_block_body) [4992 5009])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [5074 5093])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5107 5111])
                            ("key" variable nil (reparse-symbol function_parameters) [5113 5116])
                            ("default" variable nil (reparse-symbol function_parameters) [5118 5125]))                          )
                        (reparse-symbol indented_block_body) [5099 5529])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5549 5553])
                            ("key" variable nil (reparse-symbol function_parameters) [5555 5558])
                            ("default" variable nil (reparse-symbol function_parameters) [5560 5567]))                          )
                        (reparse-symbol indented_block_body) [5534 5758])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5775 5779])
                            ("last" variable nil (reparse-symbol function_parameters) [5781 5785]))                          )
                        (reparse-symbol indented_block_body) [5763 6147])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6165 6169])
                            ("_repr_running" variable nil (reparse-symbol function_parameters) [6171 6184]))                          )
                        (reparse-symbol indented_block_body) [6152 6593])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6613 6617]))                          )
                        (reparse-symbol indented_block_body) [6598 6943])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6957 6961]))                          )
                        (reparse-symbol indented_block_body) [6948 7044])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7079 7082])
                            ("iterable" variable nil (reparse-symbol function_parameters) [7084 7092])
                            ("value" variable nil (reparse-symbol function_parameters) [7094 7099]))                          )
                        (reparse-symbol indented_block_body) [7049 7349])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7365 7369])
                            ("other" variable nil (reparse-symbol function_parameters) [7371 7376]))                          )
                        (reparse-symbol indented_block_body) [7354 7701])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7717 7721])
                            ("other" variable nil (reparse-symbol function_parameters) [7723 7728]))                          )
                        (reparse-symbol indented_block_body) [7706 7798])
                    ("viewkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7893 7897]))                          )
                        (reparse-symbol indented_block_body) [7880 8005])
                    ("viewvalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8025 8029]))                          )
                        (reparse-symbol indented_block_body) [8010 8135])
                    ("viewitems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8154 8158]))                          )
                        (reparse-symbol indented_block_body) [8140 8269]))                  
                :type "class")
                nil [898 8269])
            ("_class_template" variable nil nil [8449 9897])
            ("_repr_template" variable nil nil [9899 9927])
            ("_field_template" variable nil nil [9929 10042])
            ("namedtuple" function
               (:documentation "Returns a new subclass of tuple with named fields.

    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessable by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)

    "
                :arguments 
                  ( ("typename" variable nil (reparse-symbol function_parameters) [10059 10067])
                    ("field_names" variable nil (reparse-symbol function_parameters) [10069 10080])
                    ("verbose" variable nil (reparse-symbol function_parameters) [10082 10089])
                    ("rename" variable nil (reparse-symbol function_parameters) [10097 10103]))                  )
                nil [10044 14096])
            ("Counter" type
               (:superclasses ("dict")
                :members 
                  ( ("'''Dict subclass for counting hashable items.  Sometimes called a bag
    or multiset.  Elements are stored as dictionary keys and their counts
    are stored as dictionary values.

    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string

    >>> c.most_common(3)                # three most common elements
    [('a', 5), ('b', 4), ('c', 3)]
    >>> sorted(c)                       # list all unique elements
    ['a', 'b', 'c', 'd', 'e']
    >>> ''.join(sorted(c.elements()))   # list elements with repetitions
    'aaaaabbbbcccdde'
    >>> sum(c.values())                 # total of all counts
    15

    >>> c['a']                          # count of letter 'a'
    5
    >>> for elem in 'shazam':           # update counts from an iterable
    ...     c[elem] += 1                # by adding 1 to each element's count
    >>> c['a']                          # now there are seven 'a'
    7
    >>> del c['b']                      # remove all 'b'
    >>> c['b']                          # now there are zero 'b'
    0

    >>> d = Counter('simsalabim')       # make another counter
    >>> c.update(d)                     # add in the second counter
    >>> c['a']                          # now there are nine 'a'
    9

    >>> c.clear()                       # empty the counter
    >>> c
    Counter()

    Note:  If a count is set to zero or reduced to zero, it will remain
    in the counter until the entry is deleted or the counter is cleared:

    >>> c = Counter('aaabbc')
    >>> c['b'] -= 2                     # reduce the count of 'b' by two
    >>> c.most_common()                 # 'b' is still in, but its count is zero
    [('a', 3), ('c', 1), ('b', 0)]

    '''" code nil (reparse-symbol indented_block_body) [14283 15984])
                    ("__init__" function
                       (:suite 
                          ( ("'''Create a new, empty Counter object.  And if given, count elements
        from an input iterable.  Or, initialize the count from another mapping
        of elements to their counts.

        >>> c = Counter()                           # a new, empty counter
        >>> c = Counter('gallahad')                 # a new counter from an iterable
        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping
        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args

        '''" code nil (reparse-symbol indented_block_body) [16369 16896])
                            ("super" code nil (reparse-symbol indented_block_body) [16905 16936])
                            ("self" code nil (reparse-symbol indented_block_body) [16945 16974]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16331 16335])
                            ("iterable" variable nil (reparse-symbol function_parameters) [16337 16345])
                            ("kwds" variable nil (reparse-symbol function_parameters) [16352 16358]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16318 16975])
                    ("__missing__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16996 17000])
                            ("key" variable nil (reparse-symbol function_parameters) [17002 17005]))                          )
                        (reparse-symbol indented_block_body) [16980 17153])
                    ("most_common" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17174 17178])
                            ("n" variable nil (reparse-symbol function_parameters) [17180 17181]))                          )
                        (reparse-symbol indented_block_body) [17158 17667])
                    ("elements" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17685 17689]))                          )
                        (reparse-symbol indented_block_body) [17672 18490])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [18570 18573])
                            ("iterable" variable nil (reparse-symbol function_parameters) [18575 18583])
                            ("v" variable nil (reparse-symbol function_parameters) [18585 18586]))                          )
                        (reparse-symbol indented_block_body) [18540 18849])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18865 18869])
                            ("iterable" variable nil (reparse-symbol function_parameters) [18871 18879])
                            ("kwds" variable nil (reparse-symbol function_parameters) [18886 18892]))                          )
                        (reparse-symbol indented_block_body) [18854 20395])
                    ("subtract" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20413 20417])
                            ("iterable" variable nil (reparse-symbol function_parameters) [20419 20427])
                            ("kwds" variable nil (reparse-symbol function_parameters) [20434 20440]))                          )
                        (reparse-symbol indented_block_body) [20400 21536])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21550 21554]))                          )
                        (reparse-symbol indented_block_body) [21541 21626])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21646 21650]))                          )
                        (reparse-symbol indented_block_body) [21631 21698])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21719 21723])
                            ("elem" variable nil (reparse-symbol function_parameters) [21725 21729]))                          )
                        (reparse-symbol indented_block_body) [21703 21890])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21908 21912]))                          )
                        (reparse-symbol indented_block_body) [21895 22118])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22475 22479])
                            ("other" variable nil (reparse-symbol function_parameters) [22481 22486]))                          )
                        (reparse-symbol indented_block_body) [22463 23036])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23053 23057])
                            ("other" variable nil (reparse-symbol function_parameters) [23059 23064]))                          )
                        (reparse-symbol indented_block_body) [23041 23643])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23659 23663])
                            ("other" variable nil (reparse-symbol function_parameters) [23665 23670]))                          )
                        (reparse-symbol indented_block_body) [23648 24317])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24334 24338])
                            ("other" variable nil (reparse-symbol function_parameters) [24340 24345]))                          )
                        (reparse-symbol indented_block_body) [24322 24841]))                  
                :type "class")
                nil [14258 24841])
            ("if" code nil nil [24843 26010]))          
    :file "collections.py"
    :pointmax 26010
    :fsize 26009
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax '((NAME 25468 . 25478) (PAREN_BLOCK 25478 . 25494) (NAME 25126 . 25136) (PAREN_BLOCK 25136 . 25152) (NAME 24693 . 24701) (IF 24710 . 24712) (ELSE 24733 . 24737) (NAME 24043 . 24051) (IF 24066 . 24068) (ELSE 24089 . 24093) (INDENT_BLOCK 13534 . 13598) (NEWLINE 13533 . 13534) (COLON 13532 . 13533) (TRY 13457 . 13460) (AS 13528 . 13530))
    )
   (semanticdb-table "locale.py"
    :major-mode 'python-mode
    :tags nil
    :file "locale.py"
    :pointmax 92588
    :fsize 92587
    :lastmodtime '(21294 8926 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "_abcoll.py"
    :file "_abcoll.py"
    :fsize 17876
    :lastmodtime '(21294 8926 0 0)
    )
   (semanticdb-table "keyword.py"
    :file "keyword.py"
    :fsize 1995
    :lastmodtime '(21294 8973 0 0)
    )
   (semanticdb-table "heapq.py"
    :file "heapq.py"
    :fsize 18296
    :lastmodtime '(21294 8926 0 0)
    )
   )
  :file "!usr!lib!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
